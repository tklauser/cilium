// Code generated by protoc-gen-go. DO NOT EDIT.
// source: flow/flow.proto

package flow

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type FlowType int32

const (
	FlowType_UNKNOWN_TYPE FlowType = 0
	FlowType_L3_L4        FlowType = 1
	FlowType_L7           FlowType = 2
)

var FlowType_name = map[int32]string{
	0: "UNKNOWN_TYPE",
	1: "L3_L4",
	2: "L7",
}

var FlowType_value = map[string]int32{
	"UNKNOWN_TYPE": 0,
	"L3_L4":        1,
	"L7":           2,
}

func (x FlowType) String() string {
	return proto.EnumName(FlowType_name, int32(x))
}

func (FlowType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3c1fa740027c1208, []int{0}
}

type TraceObservationPoint int32

const (
	// Cilium treats 0 as TO_LXC, but its's something we should work to remove.
	// This is intentionally set as unknown, so proto API can guarantee the
	// observation point is always going to be present on trace events.
	TraceObservationPoint_UNKNOWN_POINT TraceObservationPoint = 0
	TraceObservationPoint_TO_PROXY      TraceObservationPoint = 1
	TraceObservationPoint_TO_HOST       TraceObservationPoint = 2
	TraceObservationPoint_TO_STACK      TraceObservationPoint = 3
	TraceObservationPoint_TO_OVERLAY    TraceObservationPoint = 4
	// same as TO_LXC, which had a 0 value. This index is intentionally very
	// high so when new segments are added in bpf, there are no collisions
	TraceObservationPoint_TO_ENDPOINT   TraceObservationPoint = 101
	TraceObservationPoint_FROM_ENDPOINT TraceObservationPoint = 5
	TraceObservationPoint_FROM_PROXY    TraceObservationPoint = 6
	TraceObservationPoint_FROM_HOST     TraceObservationPoint = 7
	TraceObservationPoint_FROM_STACK    TraceObservationPoint = 8
	TraceObservationPoint_FROM_OVERLAY  TraceObservationPoint = 9
	TraceObservationPoint_FROM_NETWORK  TraceObservationPoint = 10
	TraceObservationPoint_TO_NETWORK    TraceObservationPoint = 11
)

var TraceObservationPoint_name = map[int32]string{
	0:   "UNKNOWN_POINT",
	1:   "TO_PROXY",
	2:   "TO_HOST",
	3:   "TO_STACK",
	4:   "TO_OVERLAY",
	101: "TO_ENDPOINT",
	5:   "FROM_ENDPOINT",
	6:   "FROM_PROXY",
	7:   "FROM_HOST",
	8:   "FROM_STACK",
	9:   "FROM_OVERLAY",
	10:  "FROM_NETWORK",
	11:  "TO_NETWORK",
}

var TraceObservationPoint_value = map[string]int32{
	"UNKNOWN_POINT": 0,
	"TO_PROXY":      1,
	"TO_HOST":       2,
	"TO_STACK":      3,
	"TO_OVERLAY":    4,
	"TO_ENDPOINT":   101,
	"FROM_ENDPOINT": 5,
	"FROM_PROXY":    6,
	"FROM_HOST":     7,
	"FROM_STACK":    8,
	"FROM_OVERLAY":  9,
	"FROM_NETWORK":  10,
	"TO_NETWORK":    11,
}

func (x TraceObservationPoint) String() string {
	return proto.EnumName(TraceObservationPoint_name, int32(x))
}

func (TraceObservationPoint) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3c1fa740027c1208, []int{1}
}

// This enum corresponds to Cilium's L7 accesslog FlowType:
//   https://github.com/cilium/cilium/blob/728c79e427438ab6f8d9375b62fccd6fed4ace3a/pkg/proxy/accesslog/record.go#L26
type L7FlowType int32

const (
	L7FlowType_UNKNOWN_L7_TYPE L7FlowType = 0
	L7FlowType_REQUEST         L7FlowType = 1
	L7FlowType_RESPONSE        L7FlowType = 2
	L7FlowType_SAMPLE          L7FlowType = 3
)

var L7FlowType_name = map[int32]string{
	0: "UNKNOWN_L7_TYPE",
	1: "REQUEST",
	2: "RESPONSE",
	3: "SAMPLE",
}

var L7FlowType_value = map[string]int32{
	"UNKNOWN_L7_TYPE": 0,
	"REQUEST":         1,
	"RESPONSE":        2,
	"SAMPLE":          3,
}

func (x L7FlowType) String() string {
	return proto.EnumName(L7FlowType_name, int32(x))
}

func (L7FlowType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3c1fa740027c1208, []int{2}
}

type IPVersion int32

const (
	IPVersion_IP_NOT_USED IPVersion = 0
	IPVersion_IPv4        IPVersion = 1
	IPVersion_IPv6        IPVersion = 2
)

var IPVersion_name = map[int32]string{
	0: "IP_NOT_USED",
	1: "IPv4",
	2: "IPv6",
}

var IPVersion_value = map[string]int32{
	"IP_NOT_USED": 0,
	"IPv4":        1,
	"IPv6":        2,
}

func (x IPVersion) String() string {
	return proto.EnumName(IPVersion_name, int32(x))
}

func (IPVersion) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3c1fa740027c1208, []int{3}
}

type Verdict int32

const (
	Verdict_VERDICT_UNKNOWN Verdict = 0
	Verdict_FORWARDED       Verdict = 1
	Verdict_DROPPED         Verdict = 2
	Verdict_ERROR           Verdict = 3
)

var Verdict_name = map[int32]string{
	0: "VERDICT_UNKNOWN",
	1: "FORWARDED",
	2: "DROPPED",
	3: "ERROR",
}

var Verdict_value = map[string]int32{
	"VERDICT_UNKNOWN": 0,
	"FORWARDED":       1,
	"DROPPED":         2,
	"ERROR":           3,
}

func (x Verdict) String() string {
	return proto.EnumName(Verdict_name, int32(x))
}

func (Verdict) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3c1fa740027c1208, []int{4}
}

// Taken from pkg/monitor/api/drop.go. Note that non-drop reasons (i.e. values
// less than api.DropMin) are not used here.
type DropReason int32

const (
	// non-drop reasons
	DropReason_DROP_REASON_UNKNOWN DropReason = 0
	// drop reasons
	DropReason_INVALID_SOURCE_MAC                                    DropReason = 130
	DropReason_INVALID_DESTINATION_MAC                               DropReason = 131
	DropReason_INVALID_SOURCE_IP                                     DropReason = 132
	DropReason_POLICY_DENIED                                         DropReason = 133
	DropReason_INVALID_PACKET_DROPPED                                DropReason = 134
	DropReason_CT_TRUNCATED_OR_INVALID_HEADER                        DropReason = 135
	DropReason_CT_MISSING_TCP_ACK_FLAG                               DropReason = 136
	DropReason_CT_UNKNOWN_L4_PROTOCOL                                DropReason = 137
	DropReason_CT_CANNOT_CREATE_ENTRY_FROM_PACKET                    DropReason = 138
	DropReason_UNSUPPORTED_L3_PROTOCOL                               DropReason = 139
	DropReason_MISSED_TAIL_CALL                                      DropReason = 140
	DropReason_ERROR_WRITING_TO_PACKET                               DropReason = 141
	DropReason_UNKNOWN_L4_PROTOCOL                                   DropReason = 142
	DropReason_UNKNOWN_ICMPV4_CODE                                   DropReason = 143
	DropReason_UNKNOWN_ICMPV4_TYPE                                   DropReason = 144
	DropReason_UNKNOWN_ICMPV6_CODE                                   DropReason = 145
	DropReason_UNKNOWN_ICMPV6_TYPE                                   DropReason = 146
	DropReason_ERROR_RETRIEVING_TUNNEL_KEY                           DropReason = 147
	DropReason_ERROR_RETRIEVING_TUNNEL_OPTIONS                       DropReason = 148
	DropReason_INVALID_GENEVE_OPTION                                 DropReason = 149
	DropReason_UNKNOWN_L3_TARGET_ADDRESS                             DropReason = 150
	DropReason_STALE_OR_UNROUTABLE_IP                                DropReason = 151
	DropReason_NO_MATCHING_LOCAL_CONTAINER_FOUND                     DropReason = 152
	DropReason_ERROR_WHILE_CORRECTING_L3_CHECKSUM                    DropReason = 153
	DropReason_ERROR_WHILE_CORRECTING_L4_CHECKSUM                    DropReason = 154
	DropReason_CT_MAP_INSERTION_FAILED                               DropReason = 155
	DropReason_INVALID_IPV6_EXTENSION_HEADER                         DropReason = 156
	DropReason_IP_FRAGMENTATION_NOT_SUPPORTED                        DropReason = 157
	DropReason_SERVICE_BACKEND_NOT_FOUND                             DropReason = 158
	DropReason_NO_TUNNEL_OR_ENCAPSULATION_ENDPOINT                   DropReason = 160
	DropReason_FAILED_TO_INSERT_INTO_PROXYMAP                        DropReason = 161
	DropReason_REACHED_EDT_RATE_LIMITING_DROP_HORIZON                DropReason = 162
	DropReason_UNKNOWN_CONNECTION_TRACKING_STATE                     DropReason = 163
	DropReason_LOCAL_HOST_IS_UNREACHABLE                             DropReason = 164
	DropReason_NO_CONFIGURATION_AVAILABLE_TO_PERFORM_POLICY_DECISION DropReason = 165
	DropReason_UNSUPPORTED_L2_PROTOCOL                               DropReason = 166
	DropReason_NO_MAPPING_FOR_NAT_MASQUERADE                         DropReason = 167
	DropReason_UNSUPPORTED_PROTOCOL_FOR_NAT_MASQUERADE               DropReason = 168
	DropReason_FIB_LOOKUP_FAILED                                     DropReason = 169
	DropReason_ENCAPSULATION_TRAFFIC_IS_PROHIBITED                   DropReason = 170
	DropReason_INVALID_IDENTITY                                      DropReason = 171
	DropReason_UNKNOWN_SENDER                                        DropReason = 172
	DropReason_NAT_NOT_NEEDED                                        DropReason = 173
	DropReason_IS_A_CLUSTERIP                                        DropReason = 174
	DropReason_FIRST_LOGICAL_DATAGRAM_FRAGMENT_NOT_FOUND             DropReason = 175
	DropReason_FORBIDDEN_ICMPV6_MESSAGE                              DropReason = 176
	DropReason_DENIED_BY_LB_SRC_RANGE_CHECK                          DropReason = 177
	DropReason_SOCKET_LOOKUP_FAILED                                  DropReason = 178
	DropReason_SOCKET_ASSIGN_FAILED                                  DropReason = 179
	DropReason_PROXY_REDIRECTION_NOT_SUPPORTED_FOR_PROTOCOL          DropReason = 180
)

var DropReason_name = map[int32]string{
	0:   "DROP_REASON_UNKNOWN",
	130: "INVALID_SOURCE_MAC",
	131: "INVALID_DESTINATION_MAC",
	132: "INVALID_SOURCE_IP",
	133: "POLICY_DENIED",
	134: "INVALID_PACKET_DROPPED",
	135: "CT_TRUNCATED_OR_INVALID_HEADER",
	136: "CT_MISSING_TCP_ACK_FLAG",
	137: "CT_UNKNOWN_L4_PROTOCOL",
	138: "CT_CANNOT_CREATE_ENTRY_FROM_PACKET",
	139: "UNSUPPORTED_L3_PROTOCOL",
	140: "MISSED_TAIL_CALL",
	141: "ERROR_WRITING_TO_PACKET",
	142: "UNKNOWN_L4_PROTOCOL",
	143: "UNKNOWN_ICMPV4_CODE",
	144: "UNKNOWN_ICMPV4_TYPE",
	145: "UNKNOWN_ICMPV6_CODE",
	146: "UNKNOWN_ICMPV6_TYPE",
	147: "ERROR_RETRIEVING_TUNNEL_KEY",
	148: "ERROR_RETRIEVING_TUNNEL_OPTIONS",
	149: "INVALID_GENEVE_OPTION",
	150: "UNKNOWN_L3_TARGET_ADDRESS",
	151: "STALE_OR_UNROUTABLE_IP",
	152: "NO_MATCHING_LOCAL_CONTAINER_FOUND",
	153: "ERROR_WHILE_CORRECTING_L3_CHECKSUM",
	154: "ERROR_WHILE_CORRECTING_L4_CHECKSUM",
	155: "CT_MAP_INSERTION_FAILED",
	156: "INVALID_IPV6_EXTENSION_HEADER",
	157: "IP_FRAGMENTATION_NOT_SUPPORTED",
	158: "SERVICE_BACKEND_NOT_FOUND",
	160: "NO_TUNNEL_OR_ENCAPSULATION_ENDPOINT",
	161: "FAILED_TO_INSERT_INTO_PROXYMAP",
	162: "REACHED_EDT_RATE_LIMITING_DROP_HORIZON",
	163: "UNKNOWN_CONNECTION_TRACKING_STATE",
	164: "LOCAL_HOST_IS_UNREACHABLE",
	165: "NO_CONFIGURATION_AVAILABLE_TO_PERFORM_POLICY_DECISION",
	166: "UNSUPPORTED_L2_PROTOCOL",
	167: "NO_MAPPING_FOR_NAT_MASQUERADE",
	168: "UNSUPPORTED_PROTOCOL_FOR_NAT_MASQUERADE",
	169: "FIB_LOOKUP_FAILED",
	170: "ENCAPSULATION_TRAFFIC_IS_PROHIBITED",
	171: "INVALID_IDENTITY",
	172: "UNKNOWN_SENDER",
	173: "NAT_NOT_NEEDED",
	174: "IS_A_CLUSTERIP",
	175: "FIRST_LOGICAL_DATAGRAM_FRAGMENT_NOT_FOUND",
	176: "FORBIDDEN_ICMPV6_MESSAGE",
	177: "DENIED_BY_LB_SRC_RANGE_CHECK",
	178: "SOCKET_LOOKUP_FAILED",
	179: "SOCKET_ASSIGN_FAILED",
	180: "PROXY_REDIRECTION_NOT_SUPPORTED_FOR_PROTOCOL",
}

var DropReason_value = map[string]int32{
	"DROP_REASON_UNKNOWN":                                   0,
	"INVALID_SOURCE_MAC":                                    130,
	"INVALID_DESTINATION_MAC":                               131,
	"INVALID_SOURCE_IP":                                     132,
	"POLICY_DENIED":                                         133,
	"INVALID_PACKET_DROPPED":                                134,
	"CT_TRUNCATED_OR_INVALID_HEADER":                        135,
	"CT_MISSING_TCP_ACK_FLAG":                               136,
	"CT_UNKNOWN_L4_PROTOCOL":                                137,
	"CT_CANNOT_CREATE_ENTRY_FROM_PACKET":                    138,
	"UNSUPPORTED_L3_PROTOCOL":                               139,
	"MISSED_TAIL_CALL":                                      140,
	"ERROR_WRITING_TO_PACKET":                               141,
	"UNKNOWN_L4_PROTOCOL":                                   142,
	"UNKNOWN_ICMPV4_CODE":                                   143,
	"UNKNOWN_ICMPV4_TYPE":                                   144,
	"UNKNOWN_ICMPV6_CODE":                                   145,
	"UNKNOWN_ICMPV6_TYPE":                                   146,
	"ERROR_RETRIEVING_TUNNEL_KEY":                           147,
	"ERROR_RETRIEVING_TUNNEL_OPTIONS":                       148,
	"INVALID_GENEVE_OPTION":                                 149,
	"UNKNOWN_L3_TARGET_ADDRESS":                             150,
	"STALE_OR_UNROUTABLE_IP":                                151,
	"NO_MATCHING_LOCAL_CONTAINER_FOUND":                     152,
	"ERROR_WHILE_CORRECTING_L3_CHECKSUM":                    153,
	"ERROR_WHILE_CORRECTING_L4_CHECKSUM":                    154,
	"CT_MAP_INSERTION_FAILED":                               155,
	"INVALID_IPV6_EXTENSION_HEADER":                         156,
	"IP_FRAGMENTATION_NOT_SUPPORTED":                        157,
	"SERVICE_BACKEND_NOT_FOUND":                             158,
	"NO_TUNNEL_OR_ENCAPSULATION_ENDPOINT":                   160,
	"FAILED_TO_INSERT_INTO_PROXYMAP":                        161,
	"REACHED_EDT_RATE_LIMITING_DROP_HORIZON":                162,
	"UNKNOWN_CONNECTION_TRACKING_STATE":                     163,
	"LOCAL_HOST_IS_UNREACHABLE":                             164,
	"NO_CONFIGURATION_AVAILABLE_TO_PERFORM_POLICY_DECISION": 165,
	"UNSUPPORTED_L2_PROTOCOL":                               166,
	"NO_MAPPING_FOR_NAT_MASQUERADE":                         167,
	"UNSUPPORTED_PROTOCOL_FOR_NAT_MASQUERADE":               168,
	"FIB_LOOKUP_FAILED":                                     169,
	"ENCAPSULATION_TRAFFIC_IS_PROHIBITED":                   170,
	"INVALID_IDENTITY":                                      171,
	"UNKNOWN_SENDER":                                        172,
	"NAT_NOT_NEEDED":                                        173,
	"IS_A_CLUSTERIP":                                        174,
	"FIRST_LOGICAL_DATAGRAM_FRAGMENT_NOT_FOUND":             175,
	"FORBIDDEN_ICMPV6_MESSAGE":                              176,
	"DENIED_BY_LB_SRC_RANGE_CHECK":                          177,
	"SOCKET_LOOKUP_FAILED":                                  178,
	"SOCKET_ASSIGN_FAILED":                                  179,
	"PROXY_REDIRECTION_NOT_SUPPORTED_FOR_PROTOCOL":          180,
}

func (x DropReason) String() string {
	return proto.EnumName(DropReason_name, int32(x))
}

func (DropReason) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3c1fa740027c1208, []int{5}
}

type TrafficDirection int32

const (
	TrafficDirection_TRAFFIC_DIRECTION_UNKNOWN TrafficDirection = 0
	TrafficDirection_INGRESS                   TrafficDirection = 1
	TrafficDirection_EGRESS                    TrafficDirection = 2
)

var TrafficDirection_name = map[int32]string{
	0: "TRAFFIC_DIRECTION_UNKNOWN",
	1: "INGRESS",
	2: "EGRESS",
}

var TrafficDirection_value = map[string]int32{
	"TRAFFIC_DIRECTION_UNKNOWN": 0,
	"INGRESS":                   1,
	"EGRESS":                    2,
}

func (x TrafficDirection) String() string {
	return proto.EnumName(TrafficDirection_name, int32(x))
}

func (TrafficDirection) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3c1fa740027c1208, []int{6}
}

// EventType are constants are based on the ones from <linux/perf_event.h>.
type EventType int32

const (
	EventType_UNKNOWN EventType = 0
	// EventSample is equivalent to PERF_RECORD_SAMPLE.
	EventType_EventSample EventType = 9
	// RecordLost is equivalent to PERF_RECORD_LOST.
	EventType_RecordLost EventType = 2
)

var EventType_name = map[int32]string{
	0: "UNKNOWN",
	9: "EventSample",
	2: "RecordLost",
}

var EventType_value = map[string]int32{
	"UNKNOWN":     0,
	"EventSample": 9,
	"RecordLost":  2,
}

func (x EventType) String() string {
	return proto.EnumName(EventType_name, int32(x))
}

func (EventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3c1fa740027c1208, []int{7}
}

type Flow struct {
	Time    *timestamp.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	Verdict Verdict              `protobuf:"varint,2,opt,name=verdict,proto3,enum=flow.Verdict" json:"verdict,omitempty"`
	// only applicable to Verdict = DROPPED.
	// deprecated in favor of drop_reason_desc.
	DropReason uint32 `protobuf:"varint,3,opt,name=drop_reason,json=dropReason,proto3" json:"drop_reason,omitempty"` // Deprecated: Do not use.
	// l2
	Ethernet *Ethernet `protobuf:"bytes,4,opt,name=ethernet,proto3" json:"ethernet,omitempty"`
	// l3
	IP *IP `protobuf:"bytes,5,opt,name=IP,proto3" json:"IP,omitempty"`
	// l4
	L4          *Layer4   `protobuf:"bytes,6,opt,name=l4,proto3" json:"l4,omitempty"`
	Source      *Endpoint `protobuf:"bytes,8,opt,name=source,proto3" json:"source,omitempty"`
	Destination *Endpoint `protobuf:"bytes,9,opt,name=destination,proto3" json:"destination,omitempty"`
	Type        FlowType  `protobuf:"varint,10,opt,name=Type,proto3,enum=flow.FlowType" json:"Type,omitempty"`
	// NodeName is the name of the node from which this Flow was captured.
	NodeName string `protobuf:"bytes,11,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	// all names the source IP can have.
	SourceNames []string `protobuf:"bytes,13,rep,name=source_names,json=sourceNames,proto3" json:"source_names,omitempty"`
	// all names the destination IP can have.
	DestinationNames []string `protobuf:"bytes,14,rep,name=destination_names,json=destinationNames,proto3" json:"destination_names,omitempty"`
	// L7 information. This field is set if and only if FlowType is L7.
	L7    *Layer7 `protobuf:"bytes,15,opt,name=l7,proto3" json:"l7,omitempty"`
	Reply bool    `protobuf:"varint,16,opt,name=reply,proto3" json:"reply,omitempty"`
	// EventType of the originating Cilium event
	EventType *CiliumEventType `protobuf:"bytes,19,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	// source_service contains the service name of the source
	SourceService *Service `protobuf:"bytes,20,opt,name=source_service,json=sourceService,proto3" json:"source_service,omitempty"`
	// destination_service contains the service name of the destination
	DestinationService *Service `protobuf:"bytes,21,opt,name=destination_service,json=destinationService,proto3" json:"destination_service,omitempty"`
	// traffic_direction of the connection, e.g. ingress or egress
	TrafficDirection TrafficDirection `protobuf:"varint,22,opt,name=traffic_direction,json=trafficDirection,proto3,enum=flow.TrafficDirection" json:"traffic_direction,omitempty"`
	// policy_match_type is only applicable to the cilium event type PolicyVerdict
	// https://github.com/cilium/cilium/blob/e831859b5cc336c6d964a6d35bbd34d1840e21b9/pkg/monitor/datapath_policy.go#L50
	PolicyMatchType uint32 `protobuf:"varint,23,opt,name=policy_match_type,json=policyMatchType,proto3" json:"policy_match_type,omitempty"`
	// Only applicable to cilium trace notifications, blank for other types.
	TraceObservationPoint TraceObservationPoint `protobuf:"varint,24,opt,name=trace_observation_point,json=traceObservationPoint,proto3,enum=flow.TraceObservationPoint" json:"trace_observation_point,omitempty"`
	// only applicable to Verdict = DROPPED.
	DropReasonDesc DropReason `protobuf:"varint,25,opt,name=drop_reason_desc,json=dropReasonDesc,proto3,enum=flow.DropReason" json:"drop_reason_desc,omitempty"`
	// This is a temporary workaround to support summary field for pb.Flow without
	// duplicating logic from the old parser. This field will be removed once we
	// fully migrate to the new parser.
	Summary              string   `protobuf:"bytes,100000,opt,name=Summary,proto3" json:"Summary,omitempty"` // Deprecated: Do not use.
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Flow) Reset()         { *m = Flow{} }
func (m *Flow) String() string { return proto.CompactTextString(m) }
func (*Flow) ProtoMessage()    {}
func (*Flow) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c1fa740027c1208, []int{0}
}

func (m *Flow) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Flow.Unmarshal(m, b)
}
func (m *Flow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Flow.Marshal(b, m, deterministic)
}
func (m *Flow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Flow.Merge(m, src)
}
func (m *Flow) XXX_Size() int {
	return xxx_messageInfo_Flow.Size(m)
}
func (m *Flow) XXX_DiscardUnknown() {
	xxx_messageInfo_Flow.DiscardUnknown(m)
}

var xxx_messageInfo_Flow proto.InternalMessageInfo

func (m *Flow) GetTime() *timestamp.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *Flow) GetVerdict() Verdict {
	if m != nil {
		return m.Verdict
	}
	return Verdict_VERDICT_UNKNOWN
}

// Deprecated: Do not use.
func (m *Flow) GetDropReason() uint32 {
	if m != nil {
		return m.DropReason
	}
	return 0
}

func (m *Flow) GetEthernet() *Ethernet {
	if m != nil {
		return m.Ethernet
	}
	return nil
}

func (m *Flow) GetIP() *IP {
	if m != nil {
		return m.IP
	}
	return nil
}

func (m *Flow) GetL4() *Layer4 {
	if m != nil {
		return m.L4
	}
	return nil
}

func (m *Flow) GetSource() *Endpoint {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *Flow) GetDestination() *Endpoint {
	if m != nil {
		return m.Destination
	}
	return nil
}

func (m *Flow) GetType() FlowType {
	if m != nil {
		return m.Type
	}
	return FlowType_UNKNOWN_TYPE
}

func (m *Flow) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *Flow) GetSourceNames() []string {
	if m != nil {
		return m.SourceNames
	}
	return nil
}

func (m *Flow) GetDestinationNames() []string {
	if m != nil {
		return m.DestinationNames
	}
	return nil
}

func (m *Flow) GetL7() *Layer7 {
	if m != nil {
		return m.L7
	}
	return nil
}

func (m *Flow) GetReply() bool {
	if m != nil {
		return m.Reply
	}
	return false
}

func (m *Flow) GetEventType() *CiliumEventType {
	if m != nil {
		return m.EventType
	}
	return nil
}

func (m *Flow) GetSourceService() *Service {
	if m != nil {
		return m.SourceService
	}
	return nil
}

func (m *Flow) GetDestinationService() *Service {
	if m != nil {
		return m.DestinationService
	}
	return nil
}

func (m *Flow) GetTrafficDirection() TrafficDirection {
	if m != nil {
		return m.TrafficDirection
	}
	return TrafficDirection_TRAFFIC_DIRECTION_UNKNOWN
}

func (m *Flow) GetPolicyMatchType() uint32 {
	if m != nil {
		return m.PolicyMatchType
	}
	return 0
}

func (m *Flow) GetTraceObservationPoint() TraceObservationPoint {
	if m != nil {
		return m.TraceObservationPoint
	}
	return TraceObservationPoint_UNKNOWN_POINT
}

func (m *Flow) GetDropReasonDesc() DropReason {
	if m != nil {
		return m.DropReasonDesc
	}
	return DropReason_DROP_REASON_UNKNOWN
}

// Deprecated: Do not use.
func (m *Flow) GetSummary() string {
	if m != nil {
		return m.Summary
	}
	return ""
}

type Layer4 struct {
	// Types that are valid to be assigned to Protocol:
	//	*Layer4_TCP
	//	*Layer4_UDP
	//	*Layer4_ICMPv4
	//	*Layer4_ICMPv6
	Protocol             isLayer4_Protocol `protobuf_oneof:"protocol"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Layer4) Reset()         { *m = Layer4{} }
func (m *Layer4) String() string { return proto.CompactTextString(m) }
func (*Layer4) ProtoMessage()    {}
func (*Layer4) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c1fa740027c1208, []int{1}
}

func (m *Layer4) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Layer4.Unmarshal(m, b)
}
func (m *Layer4) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Layer4.Marshal(b, m, deterministic)
}
func (m *Layer4) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Layer4.Merge(m, src)
}
func (m *Layer4) XXX_Size() int {
	return xxx_messageInfo_Layer4.Size(m)
}
func (m *Layer4) XXX_DiscardUnknown() {
	xxx_messageInfo_Layer4.DiscardUnknown(m)
}

var xxx_messageInfo_Layer4 proto.InternalMessageInfo

type isLayer4_Protocol interface {
	isLayer4_Protocol()
}

type Layer4_TCP struct {
	TCP *TCP `protobuf:"bytes,1,opt,name=TCP,proto3,oneof"`
}

type Layer4_UDP struct {
	UDP *UDP `protobuf:"bytes,2,opt,name=UDP,proto3,oneof"`
}

type Layer4_ICMPv4 struct {
	ICMPv4 *ICMPv4 `protobuf:"bytes,3,opt,name=ICMPv4,proto3,oneof"`
}

type Layer4_ICMPv6 struct {
	ICMPv6 *ICMPv6 `protobuf:"bytes,4,opt,name=ICMPv6,proto3,oneof"`
}

func (*Layer4_TCP) isLayer4_Protocol() {}

func (*Layer4_UDP) isLayer4_Protocol() {}

func (*Layer4_ICMPv4) isLayer4_Protocol() {}

func (*Layer4_ICMPv6) isLayer4_Protocol() {}

func (m *Layer4) GetProtocol() isLayer4_Protocol {
	if m != nil {
		return m.Protocol
	}
	return nil
}

func (m *Layer4) GetTCP() *TCP {
	if x, ok := m.GetProtocol().(*Layer4_TCP); ok {
		return x.TCP
	}
	return nil
}

func (m *Layer4) GetUDP() *UDP {
	if x, ok := m.GetProtocol().(*Layer4_UDP); ok {
		return x.UDP
	}
	return nil
}

func (m *Layer4) GetICMPv4() *ICMPv4 {
	if x, ok := m.GetProtocol().(*Layer4_ICMPv4); ok {
		return x.ICMPv4
	}
	return nil
}

func (m *Layer4) GetICMPv6() *ICMPv6 {
	if x, ok := m.GetProtocol().(*Layer4_ICMPv6); ok {
		return x.ICMPv6
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Layer4) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Layer4_TCP)(nil),
		(*Layer4_UDP)(nil),
		(*Layer4_ICMPv4)(nil),
		(*Layer4_ICMPv6)(nil),
	}
}

// Message for L7 flow, which roughly corresponds to Cilium's accesslog LogRecord:
//   https://github.com/cilium/cilium/blob/728c79e427438ab6f8d9375b62fccd6fed4ace3a/pkg/proxy/accesslog/record.go#L141
type Layer7 struct {
	Type L7FlowType `protobuf:"varint,1,opt,name=type,proto3,enum=flow.L7FlowType" json:"type,omitempty"`
	// Latency of the response
	LatencyNs uint64 `protobuf:"varint,2,opt,name=latency_ns,json=latencyNs,proto3" json:"latency_ns,omitempty"`
	// L7 field. This field is set if and only if FlowType is L7.
	//
	// Types that are valid to be assigned to Record:
	//	*Layer7_Dns
	//	*Layer7_Http
	//	*Layer7_Kafka
	Record               isLayer7_Record `protobuf_oneof:"record"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Layer7) Reset()         { *m = Layer7{} }
func (m *Layer7) String() string { return proto.CompactTextString(m) }
func (*Layer7) ProtoMessage()    {}
func (*Layer7) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c1fa740027c1208, []int{2}
}

func (m *Layer7) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Layer7.Unmarshal(m, b)
}
func (m *Layer7) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Layer7.Marshal(b, m, deterministic)
}
func (m *Layer7) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Layer7.Merge(m, src)
}
func (m *Layer7) XXX_Size() int {
	return xxx_messageInfo_Layer7.Size(m)
}
func (m *Layer7) XXX_DiscardUnknown() {
	xxx_messageInfo_Layer7.DiscardUnknown(m)
}

var xxx_messageInfo_Layer7 proto.InternalMessageInfo

func (m *Layer7) GetType() L7FlowType {
	if m != nil {
		return m.Type
	}
	return L7FlowType_UNKNOWN_L7_TYPE
}

func (m *Layer7) GetLatencyNs() uint64 {
	if m != nil {
		return m.LatencyNs
	}
	return 0
}

type isLayer7_Record interface {
	isLayer7_Record()
}

type Layer7_Dns struct {
	Dns *DNS `protobuf:"bytes,100,opt,name=dns,proto3,oneof"`
}

type Layer7_Http struct {
	Http *HTTP `protobuf:"bytes,101,opt,name=http,proto3,oneof"`
}

type Layer7_Kafka struct {
	Kafka *Kafka `protobuf:"bytes,102,opt,name=kafka,proto3,oneof"`
}

func (*Layer7_Dns) isLayer7_Record() {}

func (*Layer7_Http) isLayer7_Record() {}

func (*Layer7_Kafka) isLayer7_Record() {}

func (m *Layer7) GetRecord() isLayer7_Record {
	if m != nil {
		return m.Record
	}
	return nil
}

func (m *Layer7) GetDns() *DNS {
	if x, ok := m.GetRecord().(*Layer7_Dns); ok {
		return x.Dns
	}
	return nil
}

func (m *Layer7) GetHttp() *HTTP {
	if x, ok := m.GetRecord().(*Layer7_Http); ok {
		return x.Http
	}
	return nil
}

func (m *Layer7) GetKafka() *Kafka {
	if x, ok := m.GetRecord().(*Layer7_Kafka); ok {
		return x.Kafka
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Layer7) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Layer7_Dns)(nil),
		(*Layer7_Http)(nil),
		(*Layer7_Kafka)(nil),
	}
}

type Endpoint struct {
	ID        uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Identity  uint32 `protobuf:"varint,2,opt,name=identity,proto3" json:"identity,omitempty"`
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// labels in `foo=bar` format.
	Labels               []string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty"`
	PodName              string   `protobuf:"bytes,5,opt,name=pod_name,json=podName,proto3" json:"pod_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Endpoint) Reset()         { *m = Endpoint{} }
func (m *Endpoint) String() string { return proto.CompactTextString(m) }
func (*Endpoint) ProtoMessage()    {}
func (*Endpoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c1fa740027c1208, []int{3}
}

func (m *Endpoint) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Endpoint.Unmarshal(m, b)
}
func (m *Endpoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Endpoint.Marshal(b, m, deterministic)
}
func (m *Endpoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Endpoint.Merge(m, src)
}
func (m *Endpoint) XXX_Size() int {
	return xxx_messageInfo_Endpoint.Size(m)
}
func (m *Endpoint) XXX_DiscardUnknown() {
	xxx_messageInfo_Endpoint.DiscardUnknown(m)
}

var xxx_messageInfo_Endpoint proto.InternalMessageInfo

func (m *Endpoint) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Endpoint) GetIdentity() uint32 {
	if m != nil {
		return m.Identity
	}
	return 0
}

func (m *Endpoint) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *Endpoint) GetLabels() []string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Endpoint) GetPodName() string {
	if m != nil {
		return m.PodName
	}
	return ""
}

type TCP struct {
	SourcePort           uint32    `protobuf:"varint,1,opt,name=source_port,json=sourcePort,proto3" json:"source_port,omitempty"`
	DestinationPort      uint32    `protobuf:"varint,2,opt,name=destination_port,json=destinationPort,proto3" json:"destination_port,omitempty"`
	Flags                *TCPFlags `protobuf:"bytes,3,opt,name=flags,proto3" json:"flags,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *TCP) Reset()         { *m = TCP{} }
func (m *TCP) String() string { return proto.CompactTextString(m) }
func (*TCP) ProtoMessage()    {}
func (*TCP) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c1fa740027c1208, []int{4}
}

func (m *TCP) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TCP.Unmarshal(m, b)
}
func (m *TCP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TCP.Marshal(b, m, deterministic)
}
func (m *TCP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TCP.Merge(m, src)
}
func (m *TCP) XXX_Size() int {
	return xxx_messageInfo_TCP.Size(m)
}
func (m *TCP) XXX_DiscardUnknown() {
	xxx_messageInfo_TCP.DiscardUnknown(m)
}

var xxx_messageInfo_TCP proto.InternalMessageInfo

func (m *TCP) GetSourcePort() uint32 {
	if m != nil {
		return m.SourcePort
	}
	return 0
}

func (m *TCP) GetDestinationPort() uint32 {
	if m != nil {
		return m.DestinationPort
	}
	return 0
}

func (m *TCP) GetFlags() *TCPFlags {
	if m != nil {
		return m.Flags
	}
	return nil
}

type IP struct {
	Source      string    `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Destination string    `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
	IpVersion   IPVersion `protobuf:"varint,3,opt,name=ipVersion,proto3,enum=flow.IPVersion" json:"ipVersion,omitempty"`
	// This field indicates whether the TraceReasonEncryptMask is set or not.
	// https://github.com/cilium/cilium/blob/ba0ed147bd5bb342f67b1794c2ad13c6e99d5236/pkg/monitor/datapath_trace.go#L27
	Encrypted            bool     `protobuf:"varint,4,opt,name=encrypted,proto3" json:"encrypted,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IP) Reset()         { *m = IP{} }
func (m *IP) String() string { return proto.CompactTextString(m) }
func (*IP) ProtoMessage()    {}
func (*IP) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c1fa740027c1208, []int{5}
}

func (m *IP) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IP.Unmarshal(m, b)
}
func (m *IP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IP.Marshal(b, m, deterministic)
}
func (m *IP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IP.Merge(m, src)
}
func (m *IP) XXX_Size() int {
	return xxx_messageInfo_IP.Size(m)
}
func (m *IP) XXX_DiscardUnknown() {
	xxx_messageInfo_IP.DiscardUnknown(m)
}

var xxx_messageInfo_IP proto.InternalMessageInfo

func (m *IP) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *IP) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

func (m *IP) GetIpVersion() IPVersion {
	if m != nil {
		return m.IpVersion
	}
	return IPVersion_IP_NOT_USED
}

func (m *IP) GetEncrypted() bool {
	if m != nil {
		return m.Encrypted
	}
	return false
}

type Ethernet struct {
	Source               string   `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Destination          string   `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ethernet) Reset()         { *m = Ethernet{} }
func (m *Ethernet) String() string { return proto.CompactTextString(m) }
func (*Ethernet) ProtoMessage()    {}
func (*Ethernet) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c1fa740027c1208, []int{6}
}

func (m *Ethernet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ethernet.Unmarshal(m, b)
}
func (m *Ethernet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ethernet.Marshal(b, m, deterministic)
}
func (m *Ethernet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ethernet.Merge(m, src)
}
func (m *Ethernet) XXX_Size() int {
	return xxx_messageInfo_Ethernet.Size(m)
}
func (m *Ethernet) XXX_DiscardUnknown() {
	xxx_messageInfo_Ethernet.DiscardUnknown(m)
}

var xxx_messageInfo_Ethernet proto.InternalMessageInfo

func (m *Ethernet) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *Ethernet) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

type TCPFlags struct {
	FIN                  bool     `protobuf:"varint,1,opt,name=FIN,proto3" json:"FIN,omitempty"`
	SYN                  bool     `protobuf:"varint,2,opt,name=SYN,proto3" json:"SYN,omitempty"`
	RST                  bool     `protobuf:"varint,3,opt,name=RST,proto3" json:"RST,omitempty"`
	PSH                  bool     `protobuf:"varint,4,opt,name=PSH,proto3" json:"PSH,omitempty"`
	ACK                  bool     `protobuf:"varint,5,opt,name=ACK,proto3" json:"ACK,omitempty"`
	URG                  bool     `protobuf:"varint,6,opt,name=URG,proto3" json:"URG,omitempty"`
	ECE                  bool     `protobuf:"varint,7,opt,name=ECE,proto3" json:"ECE,omitempty"`
	CWR                  bool     `protobuf:"varint,8,opt,name=CWR,proto3" json:"CWR,omitempty"`
	NS                   bool     `protobuf:"varint,9,opt,name=NS,proto3" json:"NS,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TCPFlags) Reset()         { *m = TCPFlags{} }
func (m *TCPFlags) String() string { return proto.CompactTextString(m) }
func (*TCPFlags) ProtoMessage()    {}
func (*TCPFlags) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c1fa740027c1208, []int{7}
}

func (m *TCPFlags) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TCPFlags.Unmarshal(m, b)
}
func (m *TCPFlags) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TCPFlags.Marshal(b, m, deterministic)
}
func (m *TCPFlags) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TCPFlags.Merge(m, src)
}
func (m *TCPFlags) XXX_Size() int {
	return xxx_messageInfo_TCPFlags.Size(m)
}
func (m *TCPFlags) XXX_DiscardUnknown() {
	xxx_messageInfo_TCPFlags.DiscardUnknown(m)
}

var xxx_messageInfo_TCPFlags proto.InternalMessageInfo

func (m *TCPFlags) GetFIN() bool {
	if m != nil {
		return m.FIN
	}
	return false
}

func (m *TCPFlags) GetSYN() bool {
	if m != nil {
		return m.SYN
	}
	return false
}

func (m *TCPFlags) GetRST() bool {
	if m != nil {
		return m.RST
	}
	return false
}

func (m *TCPFlags) GetPSH() bool {
	if m != nil {
		return m.PSH
	}
	return false
}

func (m *TCPFlags) GetACK() bool {
	if m != nil {
		return m.ACK
	}
	return false
}

func (m *TCPFlags) GetURG() bool {
	if m != nil {
		return m.URG
	}
	return false
}

func (m *TCPFlags) GetECE() bool {
	if m != nil {
		return m.ECE
	}
	return false
}

func (m *TCPFlags) GetCWR() bool {
	if m != nil {
		return m.CWR
	}
	return false
}

func (m *TCPFlags) GetNS() bool {
	if m != nil {
		return m.NS
	}
	return false
}

type UDP struct {
	SourcePort           uint32   `protobuf:"varint,1,opt,name=source_port,json=sourcePort,proto3" json:"source_port,omitempty"`
	DestinationPort      uint32   `protobuf:"varint,2,opt,name=destination_port,json=destinationPort,proto3" json:"destination_port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UDP) Reset()         { *m = UDP{} }
func (m *UDP) String() string { return proto.CompactTextString(m) }
func (*UDP) ProtoMessage()    {}
func (*UDP) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c1fa740027c1208, []int{8}
}

func (m *UDP) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UDP.Unmarshal(m, b)
}
func (m *UDP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UDP.Marshal(b, m, deterministic)
}
func (m *UDP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UDP.Merge(m, src)
}
func (m *UDP) XXX_Size() int {
	return xxx_messageInfo_UDP.Size(m)
}
func (m *UDP) XXX_DiscardUnknown() {
	xxx_messageInfo_UDP.DiscardUnknown(m)
}

var xxx_messageInfo_UDP proto.InternalMessageInfo

func (m *UDP) GetSourcePort() uint32 {
	if m != nil {
		return m.SourcePort
	}
	return 0
}

func (m *UDP) GetDestinationPort() uint32 {
	if m != nil {
		return m.DestinationPort
	}
	return 0
}

type ICMPv4 struct {
	Type                 uint32   `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Code                 uint32   `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ICMPv4) Reset()         { *m = ICMPv4{} }
func (m *ICMPv4) String() string { return proto.CompactTextString(m) }
func (*ICMPv4) ProtoMessage()    {}
func (*ICMPv4) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c1fa740027c1208, []int{9}
}

func (m *ICMPv4) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ICMPv4.Unmarshal(m, b)
}
func (m *ICMPv4) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ICMPv4.Marshal(b, m, deterministic)
}
func (m *ICMPv4) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ICMPv4.Merge(m, src)
}
func (m *ICMPv4) XXX_Size() int {
	return xxx_messageInfo_ICMPv4.Size(m)
}
func (m *ICMPv4) XXX_DiscardUnknown() {
	xxx_messageInfo_ICMPv4.DiscardUnknown(m)
}

var xxx_messageInfo_ICMPv4 proto.InternalMessageInfo

func (m *ICMPv4) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ICMPv4) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

type ICMPv6 struct {
	Type                 uint32   `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Code                 uint32   `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ICMPv6) Reset()         { *m = ICMPv6{} }
func (m *ICMPv6) String() string { return proto.CompactTextString(m) }
func (*ICMPv6) ProtoMessage()    {}
func (*ICMPv6) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c1fa740027c1208, []int{10}
}

func (m *ICMPv6) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ICMPv6.Unmarshal(m, b)
}
func (m *ICMPv6) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ICMPv6.Marshal(b, m, deterministic)
}
func (m *ICMPv6) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ICMPv6.Merge(m, src)
}
func (m *ICMPv6) XXX_Size() int {
	return xxx_messageInfo_ICMPv6.Size(m)
}
func (m *ICMPv6) XXX_DiscardUnknown() {
	xxx_messageInfo_ICMPv6.DiscardUnknown(m)
}

var xxx_messageInfo_ICMPv6 proto.InternalMessageInfo

func (m *ICMPv6) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ICMPv6) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

// EventTypeFilter is a filter describing a particular event type
type EventTypeFilter struct {
	// type is the primary flow type as defined by:
	// github.com/cilium/cilium/pkg/monitor/api.MessageType*
	Type int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	// match_sub_type is set to true when matching on the sub_type should
	// be done. This flag is required as 0 is a valid sub_type.
	MatchSubType bool `protobuf:"varint,2,opt,name=match_sub_type,json=matchSubType,proto3" json:"match_sub_type,omitempty"`
	// sub_type is the secondary type, e.g.
	// - github.com/cilium/cilium/pkg/monitor/api.Trace*
	SubType              int32    `protobuf:"varint,3,opt,name=sub_type,json=subType,proto3" json:"sub_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventTypeFilter) Reset()         { *m = EventTypeFilter{} }
func (m *EventTypeFilter) String() string { return proto.CompactTextString(m) }
func (*EventTypeFilter) ProtoMessage()    {}
func (*EventTypeFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c1fa740027c1208, []int{11}
}

func (m *EventTypeFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventTypeFilter.Unmarshal(m, b)
}
func (m *EventTypeFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventTypeFilter.Marshal(b, m, deterministic)
}
func (m *EventTypeFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventTypeFilter.Merge(m, src)
}
func (m *EventTypeFilter) XXX_Size() int {
	return xxx_messageInfo_EventTypeFilter.Size(m)
}
func (m *EventTypeFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_EventTypeFilter.DiscardUnknown(m)
}

var xxx_messageInfo_EventTypeFilter proto.InternalMessageInfo

func (m *EventTypeFilter) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *EventTypeFilter) GetMatchSubType() bool {
	if m != nil {
		return m.MatchSubType
	}
	return false
}

func (m *EventTypeFilter) GetSubType() int32 {
	if m != nil {
		return m.SubType
	}
	return 0
}

// CiliumEventType from which the flow originated
type CiliumEventType struct {
	// type of event the flow originated from, i.e.
	// github.com/cilium/cilium/pkg/monitor/api.MessageType*
	Type int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	// sub_type may indicate more details depending on type, e.g.
	// - github.com/cilium/cilium/pkg/monitor/api.Trace*
	// - github.com/cilium/cilium/pkg/monitor/api.Drop*
	SubType              int32    `protobuf:"varint,2,opt,name=sub_type,json=subType,proto3" json:"sub_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CiliumEventType) Reset()         { *m = CiliumEventType{} }
func (m *CiliumEventType) String() string { return proto.CompactTextString(m) }
func (*CiliumEventType) ProtoMessage()    {}
func (*CiliumEventType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c1fa740027c1208, []int{12}
}

func (m *CiliumEventType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CiliumEventType.Unmarshal(m, b)
}
func (m *CiliumEventType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CiliumEventType.Marshal(b, m, deterministic)
}
func (m *CiliumEventType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CiliumEventType.Merge(m, src)
}
func (m *CiliumEventType) XXX_Size() int {
	return xxx_messageInfo_CiliumEventType.Size(m)
}
func (m *CiliumEventType) XXX_DiscardUnknown() {
	xxx_messageInfo_CiliumEventType.DiscardUnknown(m)
}

var xxx_messageInfo_CiliumEventType proto.InternalMessageInfo

func (m *CiliumEventType) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *CiliumEventType) GetSubType() int32 {
	if m != nil {
		return m.SubType
	}
	return 0
}

// FlowFilter represent an individual flow filter. All fields are optional. If
// multiple fields are set, then all fields must match for the filter to match.
type FlowFilter struct {
	// source_ip filters by a list of source ips
	SourceIp []string `protobuf:"bytes,1,rep,name=source_ip,json=sourceIp,proto3" json:"source_ip,omitempty"`
	// source_pod filters by a list of source pod name prefixes, optionally
	// within a given namespace (e.g. "xwing", "kube-system/coredns-").
	// The pod name can be emitted to only filter by namespace
	// (e.g. "kube-system/")
	SourcePod []string `protobuf:"bytes,2,rep,name=source_pod,json=sourcePod,proto3" json:"source_pod,omitempty"`
	// source_fqdn filters by a list of source fully qualified domain names
	SourceFqdn []string `protobuf:"bytes,7,rep,name=source_fqdn,json=sourceFqdn,proto3" json:"source_fqdn,omitempty"`
	// source_labels filters on a list of source label selectors. Selectors
	// support the full Kubernetes label selector syntax.
	SourceLabel []string `protobuf:"bytes,10,rep,name=source_label,json=sourceLabel,proto3" json:"source_label,omitempty"`
	// source_service filters on a list of source service names. This field
	// supports the same syntax as the source_pod field.
	SourceService []string `protobuf:"bytes,16,rep,name=source_service,json=sourceService,proto3" json:"source_service,omitempty"`
	// destination_ip filters by a list of destination ips
	DestinationIp []string `protobuf:"bytes,3,rep,name=destination_ip,json=destinationIp,proto3" json:"destination_ip,omitempty"`
	// destination_pod filters by a list of destination pod names
	DestinationPod []string `protobuf:"bytes,4,rep,name=destination_pod,json=destinationPod,proto3" json:"destination_pod,omitempty"`
	// destination_fqdn filters by a list of destination fully qualified domain names
	DestinationFqdn []string `protobuf:"bytes,8,rep,name=destination_fqdn,json=destinationFqdn,proto3" json:"destination_fqdn,omitempty"`
	// destination_label filters on a list of destination label selectors
	DestinationLabel []string `protobuf:"bytes,11,rep,name=destination_label,json=destinationLabel,proto3" json:"destination_label,omitempty"`
	// destination_service filters on a list of destination service names
	DestinationService []string `protobuf:"bytes,17,rep,name=destination_service,json=destinationService,proto3" json:"destination_service,omitempty"`
	// only return Flows that were classified with a particular verdict.
	Verdict []Verdict `protobuf:"varint,5,rep,packed,name=verdict,proto3,enum=flow.Verdict" json:"verdict,omitempty"`
	// event_type is the list of event types to filter on
	EventType []*EventTypeFilter `protobuf:"bytes,6,rep,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	// http_status_code is a list of string prefixes (e.g. "4+", "404", "5+")
	// to filter on the HTTP status code
	HttpStatusCode []string `protobuf:"bytes,9,rep,name=http_status_code,json=httpStatusCode,proto3" json:"http_status_code,omitempty"`
	// protocol filters flows by L4 or L7 protocol, e.g. (e.g. "tcp", "http")
	Protocol []string `protobuf:"bytes,12,rep,name=protocol,proto3" json:"protocol,omitempty"`
	// source_port filters flows by L4 source port
	SourcePort []string `protobuf:"bytes,13,rep,name=source_port,json=sourcePort,proto3" json:"source_port,omitempty"`
	// destination_port filters flows by L4 destination port
	DestinationPort []string `protobuf:"bytes,14,rep,name=destination_port,json=destinationPort,proto3" json:"destination_port,omitempty"`
	// reply filters flows based on the direction of the flow.
	Reply []bool `protobuf:"varint,15,rep,packed,name=reply,proto3" json:"reply,omitempty"`
	// dns_query filters L7 DNS flows by query patterns (RE2 regex), e.g. 'kube.*local'.
	DnsQuery []string `protobuf:"bytes,18,rep,name=dns_query,json=dnsQuery,proto3" json:"dns_query,omitempty"`
	// source_identity filters by the security identity of the source endpoint.
	SourceIdentity []uint32 `protobuf:"varint,19,rep,packed,name=source_identity,json=sourceIdentity,proto3" json:"source_identity,omitempty"`
	// destination_identity filters by the security identity of the destination endpoint.
	DestinationIdentity  []uint32 `protobuf:"varint,20,rep,packed,name=destination_identity,json=destinationIdentity,proto3" json:"destination_identity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FlowFilter) Reset()         { *m = FlowFilter{} }
func (m *FlowFilter) String() string { return proto.CompactTextString(m) }
func (*FlowFilter) ProtoMessage()    {}
func (*FlowFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c1fa740027c1208, []int{13}
}

func (m *FlowFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlowFilter.Unmarshal(m, b)
}
func (m *FlowFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlowFilter.Marshal(b, m, deterministic)
}
func (m *FlowFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowFilter.Merge(m, src)
}
func (m *FlowFilter) XXX_Size() int {
	return xxx_messageInfo_FlowFilter.Size(m)
}
func (m *FlowFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowFilter.DiscardUnknown(m)
}

var xxx_messageInfo_FlowFilter proto.InternalMessageInfo

func (m *FlowFilter) GetSourceIp() []string {
	if m != nil {
		return m.SourceIp
	}
	return nil
}

func (m *FlowFilter) GetSourcePod() []string {
	if m != nil {
		return m.SourcePod
	}
	return nil
}

func (m *FlowFilter) GetSourceFqdn() []string {
	if m != nil {
		return m.SourceFqdn
	}
	return nil
}

func (m *FlowFilter) GetSourceLabel() []string {
	if m != nil {
		return m.SourceLabel
	}
	return nil
}

func (m *FlowFilter) GetSourceService() []string {
	if m != nil {
		return m.SourceService
	}
	return nil
}

func (m *FlowFilter) GetDestinationIp() []string {
	if m != nil {
		return m.DestinationIp
	}
	return nil
}

func (m *FlowFilter) GetDestinationPod() []string {
	if m != nil {
		return m.DestinationPod
	}
	return nil
}

func (m *FlowFilter) GetDestinationFqdn() []string {
	if m != nil {
		return m.DestinationFqdn
	}
	return nil
}

func (m *FlowFilter) GetDestinationLabel() []string {
	if m != nil {
		return m.DestinationLabel
	}
	return nil
}

func (m *FlowFilter) GetDestinationService() []string {
	if m != nil {
		return m.DestinationService
	}
	return nil
}

func (m *FlowFilter) GetVerdict() []Verdict {
	if m != nil {
		return m.Verdict
	}
	return nil
}

func (m *FlowFilter) GetEventType() []*EventTypeFilter {
	if m != nil {
		return m.EventType
	}
	return nil
}

func (m *FlowFilter) GetHttpStatusCode() []string {
	if m != nil {
		return m.HttpStatusCode
	}
	return nil
}

func (m *FlowFilter) GetProtocol() []string {
	if m != nil {
		return m.Protocol
	}
	return nil
}

func (m *FlowFilter) GetSourcePort() []string {
	if m != nil {
		return m.SourcePort
	}
	return nil
}

func (m *FlowFilter) GetDestinationPort() []string {
	if m != nil {
		return m.DestinationPort
	}
	return nil
}

func (m *FlowFilter) GetReply() []bool {
	if m != nil {
		return m.Reply
	}
	return nil
}

func (m *FlowFilter) GetDnsQuery() []string {
	if m != nil {
		return m.DnsQuery
	}
	return nil
}

func (m *FlowFilter) GetSourceIdentity() []uint32 {
	if m != nil {
		return m.SourceIdentity
	}
	return nil
}

func (m *FlowFilter) GetDestinationIdentity() []uint32 {
	if m != nil {
		return m.DestinationIdentity
	}
	return nil
}

// Payload is the payload, i.e. the data the monitor returns.
type Payload struct {
	// type is the event type perf returns.
	Type EventType `protobuf:"varint,1,opt,name=type,proto3,enum=flow.EventType" json:"type,omitempty"`
	// CPU is the CPU id for this event.
	CPU int32 `protobuf:"varint,2,opt,name=CPU,proto3" json:"CPU,omitempty"`
	// lost is the number of events lost for a given CPU.
	Lost uint64 `protobuf:"varint,3,opt,name=lost,proto3" json:"lost,omitempty"`
	// data is the sample data returned by perf.
	Data []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	// time when the event was observed
	Time *timestamp.Timestamp `protobuf:"bytes,5,opt,name=time,proto3" json:"time,omitempty"`
	// the host name from which the payload was captured.
	HostName             string   `protobuf:"bytes,6,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Payload) Reset()         { *m = Payload{} }
func (m *Payload) String() string { return proto.CompactTextString(m) }
func (*Payload) ProtoMessage()    {}
func (*Payload) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c1fa740027c1208, []int{14}
}

func (m *Payload) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Payload.Unmarshal(m, b)
}
func (m *Payload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Payload.Marshal(b, m, deterministic)
}
func (m *Payload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Payload.Merge(m, src)
}
func (m *Payload) XXX_Size() int {
	return xxx_messageInfo_Payload.Size(m)
}
func (m *Payload) XXX_DiscardUnknown() {
	xxx_messageInfo_Payload.DiscardUnknown(m)
}

var xxx_messageInfo_Payload proto.InternalMessageInfo

func (m *Payload) GetType() EventType {
	if m != nil {
		return m.Type
	}
	return EventType_UNKNOWN
}

func (m *Payload) GetCPU() int32 {
	if m != nil {
		return m.CPU
	}
	return 0
}

func (m *Payload) GetLost() uint64 {
	if m != nil {
		return m.Lost
	}
	return 0
}

func (m *Payload) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Payload) GetTime() *timestamp.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *Payload) GetHostName() string {
	if m != nil {
		return m.HostName
	}
	return ""
}

// DNS flow. This is basically directly mapped from Cilium's LogRecordDNS:
//     https://github.com/cilium/cilium/blob/04f3889d627774f79e56d14ddbc165b3169e2d01/pkg/proxy/accesslog/record.go#L264
type DNS struct {
	// DNS name that's being looked up: e.g. "isovalent.com."
	Query string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	// List of IP addresses in the DNS response.
	Ips []string `protobuf:"bytes,2,rep,name=ips,proto3" json:"ips,omitempty"`
	// TTL in the DNS response.
	Ttl uint32 `protobuf:"varint,3,opt,name=ttl,proto3" json:"ttl,omitempty"`
	// List of CNames in the DNS response.
	Cnames []string `protobuf:"bytes,4,rep,name=cnames,proto3" json:"cnames,omitempty"`
	// Corresponds to DNSDataSource defined in:
	//   https://github.com/cilium/cilium/blob/04f3889d627774f79e56d14ddbc165b3169e2d01/pkg/proxy/accesslog/record.go#L253
	ObservationSource string `protobuf:"bytes,5,opt,name=observation_source,json=observationSource,proto3" json:"observation_source,omitempty"`
	// Return code of the DNS request defined in:
	//   https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-6
	Rcode uint32 `protobuf:"varint,6,opt,name=rcode,proto3" json:"rcode,omitempty"`
	// String representation of qtypes defined in:
	//   https://tools.ietf.org/html/rfc1035#section-3.2.3
	Qtypes []string `protobuf:"bytes,7,rep,name=qtypes,proto3" json:"qtypes,omitempty"`
	// String representation of rrtypes defined in:
	// https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-4
	Rrtypes              []string `protobuf:"bytes,8,rep,name=rrtypes,proto3" json:"rrtypes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DNS) Reset()         { *m = DNS{} }
func (m *DNS) String() string { return proto.CompactTextString(m) }
func (*DNS) ProtoMessage()    {}
func (*DNS) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c1fa740027c1208, []int{15}
}

func (m *DNS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DNS.Unmarshal(m, b)
}
func (m *DNS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DNS.Marshal(b, m, deterministic)
}
func (m *DNS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DNS.Merge(m, src)
}
func (m *DNS) XXX_Size() int {
	return xxx_messageInfo_DNS.Size(m)
}
func (m *DNS) XXX_DiscardUnknown() {
	xxx_messageInfo_DNS.DiscardUnknown(m)
}

var xxx_messageInfo_DNS proto.InternalMessageInfo

func (m *DNS) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *DNS) GetIps() []string {
	if m != nil {
		return m.Ips
	}
	return nil
}

func (m *DNS) GetTtl() uint32 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

func (m *DNS) GetCnames() []string {
	if m != nil {
		return m.Cnames
	}
	return nil
}

func (m *DNS) GetObservationSource() string {
	if m != nil {
		return m.ObservationSource
	}
	return ""
}

func (m *DNS) GetRcode() uint32 {
	if m != nil {
		return m.Rcode
	}
	return 0
}

func (m *DNS) GetQtypes() []string {
	if m != nil {
		return m.Qtypes
	}
	return nil
}

func (m *DNS) GetRrtypes() []string {
	if m != nil {
		return m.Rrtypes
	}
	return nil
}

type HTTPHeader struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HTTPHeader) Reset()         { *m = HTTPHeader{} }
func (m *HTTPHeader) String() string { return proto.CompactTextString(m) }
func (*HTTPHeader) ProtoMessage()    {}
func (*HTTPHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c1fa740027c1208, []int{16}
}

func (m *HTTPHeader) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HTTPHeader.Unmarshal(m, b)
}
func (m *HTTPHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HTTPHeader.Marshal(b, m, deterministic)
}
func (m *HTTPHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HTTPHeader.Merge(m, src)
}
func (m *HTTPHeader) XXX_Size() int {
	return xxx_messageInfo_HTTPHeader.Size(m)
}
func (m *HTTPHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_HTTPHeader.DiscardUnknown(m)
}

var xxx_messageInfo_HTTPHeader proto.InternalMessageInfo

func (m *HTTPHeader) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *HTTPHeader) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// L7 information for HTTP flows. It corresponds to Cilium's accesslog.LogRecordHTTP type.
//   https://github.com/cilium/cilium/blob/728c79e427438ab6f8d9375b62fccd6fed4ace3a/pkg/proxy/accesslog/record.go#L206
type HTTP struct {
	Code                 uint32        `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Method               string        `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	Url                  string        `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	Protocol             string        `protobuf:"bytes,4,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Headers              []*HTTPHeader `protobuf:"bytes,5,rep,name=headers,proto3" json:"headers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *HTTP) Reset()         { *m = HTTP{} }
func (m *HTTP) String() string { return proto.CompactTextString(m) }
func (*HTTP) ProtoMessage()    {}
func (*HTTP) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c1fa740027c1208, []int{17}
}

func (m *HTTP) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HTTP.Unmarshal(m, b)
}
func (m *HTTP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HTTP.Marshal(b, m, deterministic)
}
func (m *HTTP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HTTP.Merge(m, src)
}
func (m *HTTP) XXX_Size() int {
	return xxx_messageInfo_HTTP.Size(m)
}
func (m *HTTP) XXX_DiscardUnknown() {
	xxx_messageInfo_HTTP.DiscardUnknown(m)
}

var xxx_messageInfo_HTTP proto.InternalMessageInfo

func (m *HTTP) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *HTTP) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *HTTP) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *HTTP) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *HTTP) GetHeaders() []*HTTPHeader {
	if m != nil {
		return m.Headers
	}
	return nil
}

// L7 information for Kafka flows. It corresponds to Cilium's accesslog.LogRecordKafka type.
//   https://github.com/cilium/cilium/blob/728c79e427438ab6f8d9375b62fccd6fed4ace3a/pkg/proxy/accesslog/record.go#L229
type Kafka struct {
	ErrorCode            int32    `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	ApiVersion           int32    `protobuf:"varint,2,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"`
	ApiKey               string   `protobuf:"bytes,3,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	CorrelationId        int32    `protobuf:"varint,4,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	Topic                string   `protobuf:"bytes,5,opt,name=topic,proto3" json:"topic,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Kafka) Reset()         { *m = Kafka{} }
func (m *Kafka) String() string { return proto.CompactTextString(m) }
func (*Kafka) ProtoMessage()    {}
func (*Kafka) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c1fa740027c1208, []int{18}
}

func (m *Kafka) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Kafka.Unmarshal(m, b)
}
func (m *Kafka) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Kafka.Marshal(b, m, deterministic)
}
func (m *Kafka) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Kafka.Merge(m, src)
}
func (m *Kafka) XXX_Size() int {
	return xxx_messageInfo_Kafka.Size(m)
}
func (m *Kafka) XXX_DiscardUnknown() {
	xxx_messageInfo_Kafka.DiscardUnknown(m)
}

var xxx_messageInfo_Kafka proto.InternalMessageInfo

func (m *Kafka) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *Kafka) GetApiVersion() int32 {
	if m != nil {
		return m.ApiVersion
	}
	return 0
}

func (m *Kafka) GetApiKey() string {
	if m != nil {
		return m.ApiKey
	}
	return ""
}

func (m *Kafka) GetCorrelationId() int32 {
	if m != nil {
		return m.CorrelationId
	}
	return 0
}

func (m *Kafka) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

type Service struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace            string   `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Service) Reset()         { *m = Service{} }
func (m *Service) String() string { return proto.CompactTextString(m) }
func (*Service) ProtoMessage()    {}
func (*Service) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c1fa740027c1208, []int{19}
}

func (m *Service) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Service.Unmarshal(m, b)
}
func (m *Service) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Service.Marshal(b, m, deterministic)
}
func (m *Service) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Service.Merge(m, src)
}
func (m *Service) XXX_Size() int {
	return xxx_messageInfo_Service.Size(m)
}
func (m *Service) XXX_DiscardUnknown() {
	xxx_messageInfo_Service.DiscardUnknown(m)
}

var xxx_messageInfo_Service proto.InternalMessageInfo

func (m *Service) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Service) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func init() {
	proto.RegisterEnum("flow.FlowType", FlowType_name, FlowType_value)
	proto.RegisterEnum("flow.TraceObservationPoint", TraceObservationPoint_name, TraceObservationPoint_value)
	proto.RegisterEnum("flow.L7FlowType", L7FlowType_name, L7FlowType_value)
	proto.RegisterEnum("flow.IPVersion", IPVersion_name, IPVersion_value)
	proto.RegisterEnum("flow.Verdict", Verdict_name, Verdict_value)
	proto.RegisterEnum("flow.DropReason", DropReason_name, DropReason_value)
	proto.RegisterEnum("flow.TrafficDirection", TrafficDirection_name, TrafficDirection_value)
	proto.RegisterEnum("flow.EventType", EventType_name, EventType_value)
	proto.RegisterType((*Flow)(nil), "flow.Flow")
	proto.RegisterType((*Layer4)(nil), "flow.Layer4")
	proto.RegisterType((*Layer7)(nil), "flow.Layer7")
	proto.RegisterType((*Endpoint)(nil), "flow.Endpoint")
	proto.RegisterType((*TCP)(nil), "flow.TCP")
	proto.RegisterType((*IP)(nil), "flow.IP")
	proto.RegisterType((*Ethernet)(nil), "flow.Ethernet")
	proto.RegisterType((*TCPFlags)(nil), "flow.TCPFlags")
	proto.RegisterType((*UDP)(nil), "flow.UDP")
	proto.RegisterType((*ICMPv4)(nil), "flow.ICMPv4")
	proto.RegisterType((*ICMPv6)(nil), "flow.ICMPv6")
	proto.RegisterType((*EventTypeFilter)(nil), "flow.EventTypeFilter")
	proto.RegisterType((*CiliumEventType)(nil), "flow.CiliumEventType")
	proto.RegisterType((*FlowFilter)(nil), "flow.FlowFilter")
	proto.RegisterType((*Payload)(nil), "flow.Payload")
	proto.RegisterType((*DNS)(nil), "flow.DNS")
	proto.RegisterType((*HTTPHeader)(nil), "flow.HTTPHeader")
	proto.RegisterType((*HTTP)(nil), "flow.HTTP")
	proto.RegisterType((*Kafka)(nil), "flow.Kafka")
	proto.RegisterType((*Service)(nil), "flow.Service")
}

func init() { proto.RegisterFile("flow/flow.proto", fileDescriptor_3c1fa740027c1208) }

var fileDescriptor_3c1fa740027c1208 = []byte{
	// 2938 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0xd9, 0x73, 0xdb, 0xd6,
	0xd5, 0x37, 0x28, 0x4a, 0x24, 0x0f, 0x2d, 0x09, 0xbe, 0xde, 0xe0, 0x2d, 0x56, 0x68, 0x27, 0x56,
	0x94, 0xc4, 0x4e, 0x6c, 0x7d, 0xf6, 0x7c, 0xf9, 0x66, 0xbe, 0x29, 0x04, 0x5c, 0x4a, 0xa8, 0x20,
	0x00, 0xbe, 0x00, 0xe5, 0xa8, 0x2f, 0x77, 0x68, 0x12, 0x8a, 0x39, 0xa1, 0x48, 0x9a, 0x84, 0x94,
	0xd1, 0x6b, 0xb7, 0xa4, 0x4d, 0xd2, 0x7d, 0x6f, 0xd3, 0x49, 0xd3, 0x3d, 0xdd, 0xb7, 0xc7, 0xfe,
	0x0b, 0x7d, 0xeb, 0x3f, 0xd1, 0xbf, 0xa2, 0x73, 0xce, 0x05, 0x40, 0x52, 0x56, 0x32, 0x99, 0x4e,
	0x5f, 0x38, 0xf7, 0x9e, 0xe5, 0xde, 0x73, 0xcf, 0xf9, 0x9d, 0x05, 0x84, 0xc5, 0xdd, 0x6e, 0xff,
	0x8d, 0x5b, 0xf8, 0x73, 0x73, 0x30, 0xec, 0x27, 0x7d, 0x56, 0xc4, 0xf5, 0xc5, 0xab, 0xaf, 0xf5,
	0xfb, 0xaf, 0x75, 0xe3, 0x5b, 0x44, 0x7b, 0xb8, 0xbf, 0x7b, 0x2b, 0xe9, 0xec, 0xc5, 0xa3, 0xa4,
	0xb9, 0x37, 0x50, 0x62, 0xb5, 0x7f, 0x96, 0xa0, 0x58, 0xef, 0xf6, 0xdf, 0x60, 0x37, 0xa1, 0x88,
	0x3c, 0x43, 0x5b, 0xd2, 0x96, 0xab, 0xb7, 0x2f, 0xde, 0x54, 0x8a, 0x37, 0x33, 0xc5, 0x9b, 0x51,
	0xa6, 0x28, 0x48, 0x8e, 0xdd, 0x80, 0xd2, 0x41, 0x3c, 0x6c, 0x77, 0x5a, 0x89, 0x51, 0x58, 0xd2,
	0x96, 0x17, 0x6e, 0xcf, 0xdf, 0xa4, 0xdb, 0xb7, 0x15, 0x51, 0x64, 0x5c, 0x76, 0x0d, 0xaa, 0xed,
	0x61, 0x7f, 0x20, 0x87, 0x71, 0x73, 0xd4, 0xef, 0x19, 0x33, 0x4b, 0xda, 0xf2, 0xfc, 0x5a, 0xc1,
	0xd0, 0x04, 0x20, 0x59, 0x10, 0x95, 0xad, 0x40, 0x39, 0x4e, 0x1e, 0xc5, 0xc3, 0x5e, 0x9c, 0x18,
	0x45, 0xb2, 0x60, 0x41, 0x1d, 0xc7, 0x53, 0xaa, 0xc8, 0xf9, 0xcc, 0x80, 0x82, 0x13, 0x18, 0xb3,
	0x24, 0x55, 0x56, 0x52, 0x4e, 0x20, 0x0a, 0x4e, 0xc0, 0x2e, 0x43, 0xa1, 0xbb, 0x6a, 0xcc, 0x11,
	0xe7, 0xa4, 0xe2, 0xb8, 0xcd, 0xc3, 0x78, 0xb8, 0x2a, 0x0a, 0xdd, 0x55, 0xf6, 0x2c, 0xcc, 0x8d,
	0xfa, 0xfb, 0xc3, 0x56, 0x6c, 0x94, 0xa7, 0x6e, 0xe8, 0xb5, 0x07, 0xfd, 0x4e, 0x2f, 0x11, 0x29,
	0x97, 0xbd, 0x04, 0xd5, 0x76, 0x3c, 0x4a, 0x3a, 0xbd, 0x66, 0xd2, 0xe9, 0xf7, 0x8c, 0xca, 0xb1,
	0xc2, 0x93, 0x22, 0xac, 0x06, 0xc5, 0xe8, 0x70, 0x10, 0x1b, 0x40, 0x8e, 0x48, 0x45, 0xd1, 0xab,
	0x48, 0x15, 0xc4, 0x63, 0x97, 0xa0, 0xd2, 0xeb, 0xb7, 0x63, 0xd9, 0x6b, 0xee, 0xc5, 0x46, 0x75,
	0x49, 0x5b, 0xae, 0x88, 0x32, 0x12, 0xbc, 0xe6, 0x5e, 0xcc, 0x9e, 0x86, 0x93, 0xea, 0x72, 0x62,
	0x8f, 0x8c, 0xf9, 0xa5, 0x99, 0xe5, 0x8a, 0xa8, 0x2a, 0x1a, 0x4a, 0x8c, 0xd8, 0xf3, 0x70, 0x6a,
	0xe2, 0xca, 0x54, 0x6e, 0x81, 0xe4, 0xf4, 0x09, 0x86, 0x12, 0x46, 0x47, 0xdc, 0x33, 0x16, 0x9f,
	0x70, 0xc4, 0x3d, 0x51, 0xe8, 0xde, 0x63, 0x67, 0x60, 0x76, 0x18, 0x0f, 0xba, 0x87, 0x86, 0xbe,
	0xa4, 0x2d, 0x97, 0x85, 0xda, 0xb0, 0x55, 0x80, 0xf8, 0x20, 0xee, 0x25, 0x32, 0xc1, 0xa7, 0x9c,
	0x26, 0xdd, 0xb3, 0x4a, 0xd7, 0xea, 0x74, 0x3b, 0xfb, 0x7b, 0x1c, 0xb9, 0xf4, 0xa2, 0x4a, 0x9c,
	0x2d, 0xd9, 0x2a, 0x2c, 0xa4, 0x96, 0x8f, 0xe2, 0xe1, 0x41, 0xa7, 0x15, 0x1b, 0x67, 0x48, 0x33,
	0x45, 0x43, 0xa8, 0x88, 0x62, 0x5e, 0x09, 0xa5, 0x5b, 0xf6, 0xff, 0x70, 0x7a, 0xf2, 0x31, 0x99,
	0xea, 0xd9, 0xe3, 0x54, 0xd9, 0x84, 0x64, 0xa6, 0x6f, 0xc1, 0xa9, 0x64, 0xd8, 0xdc, 0xdd, 0xed,
	0xb4, 0x64, 0xbb, 0x33, 0x8c, 0x5b, 0x14, 0xa8, 0x73, 0xe4, 0xfd, 0x73, 0x4a, 0x3b, 0x52, 0x6c,
	0x3b, 0xe3, 0x0a, 0x3d, 0x39, 0x42, 0x61, 0x2b, 0x70, 0x6a, 0xd0, 0xef, 0x76, 0x5a, 0x87, 0x72,
	0xaf, 0x99, 0xb4, 0x1e, 0xa9, 0x77, 0x9f, 0x47, 0x78, 0x8a, 0x45, 0xc5, 0xd8, 0x42, 0x3a, 0x3d,
	0x33, 0x84, 0xf3, 0xc9, 0xb0, 0xd9, 0x8a, 0x65, 0xff, 0x21, 0x1a, 0xab, 0xcc, 0x26, 0x24, 0x18,
	0x06, 0x5d, 0x7b, 0x29, 0xbf, 0xb6, 0x15, 0xfb, 0x63, 0x99, 0x80, 0xc0, 0x72, 0x36, 0x39, 0x8e,
	0xcc, 0x5e, 0x01, 0x7d, 0x22, 0x33, 0x64, 0x3b, 0x1e, 0xb5, 0x8c, 0x0b, 0x74, 0x9a, 0xae, 0x4e,
	0xb3, 0xf3, 0x04, 0x11, 0x0b, 0xe3, 0x64, 0xb1, 0xe3, 0x51, 0x8b, 0x3d, 0x05, 0xa5, 0x70, 0x7f,
	0x6f, 0xaf, 0x39, 0x3c, 0x34, 0xde, 0x7f, 0x17, 0x11, 0x5f, 0xa1, 0x9c, 0xca, 0x88, 0xb5, 0x0f,
	0x34, 0x98, 0x53, 0xd8, 0x67, 0x57, 0x60, 0x26, 0xb2, 0x82, 0x34, 0xb1, 0x2b, 0xa9, 0x9d, 0x56,
	0xb0, 0x71, 0x42, 0x20, 0x1d, 0xd9, 0x0d, 0x3b, 0xa0, 0x24, 0xce, 0xd9, 0x0d, 0x9b, 0xd8, 0x0d,
	0x3b, 0xc0, 0xac, 0x71, 0xac, 0xad, 0xe0, 0x60, 0x95, 0x32, 0x37, 0x87, 0x93, 0xa2, 0x6d, 0x9c,
	0x10, 0x29, 0x37, 0x97, 0xbb, 0x9b, 0xe6, 0xef, 0xa4, 0xdc, 0xdd, 0x5c, 0xee, 0xee, 0x1a, 0x40,
	0x99, 0x6a, 0x4a, 0xab, 0xdf, 0xad, 0xfd, 0x3d, 0x33, 0xf2, 0x1e, 0xbb, 0x0e, 0x45, 0xf2, 0xbf,
	0x36, 0xf9, 0x7e, 0xf7, 0xde, 0x38, 0x89, 0x90, 0xcb, 0xae, 0x00, 0x74, 0x9b, 0x49, 0xdc, 0x6b,
	0x1d, 0xca, 0xde, 0x88, 0x4c, 0x2e, 0x8a, 0x4a, 0x4a, 0xf1, 0x46, 0xf8, 0x94, 0x76, 0x6f, 0x64,
	0xb4, 0x27, 0x9f, 0x62, 0x7b, 0x21, 0x3e, 0xa5, 0xdd, 0x1b, 0xb1, 0x25, 0x28, 0x3e, 0x4a, 0x92,
	0x81, 0x11, 0x13, 0x1f, 0x14, 0x7f, 0x23, 0x8a, 0xf0, 0xad, 0xc4, 0x61, 0xd7, 0x60, 0xf6, 0xf5,
	0xe6, 0xee, 0xeb, 0x4d, 0x63, 0x97, 0x44, 0xaa, 0x4a, 0x64, 0x13, 0x49, 0x1b, 0x27, 0x84, 0xe2,
	0xad, 0x95, 0x61, 0x6e, 0x18, 0xb7, 0xfa, 0xc3, 0x76, 0xed, 0x4d, 0x0d, 0xca, 0x59, 0x45, 0x60,
	0x0b, 0x50, 0x70, 0x6c, 0xb2, 0x7f, 0x5e, 0x14, 0x1c, 0x9b, 0x5d, 0x84, 0x72, 0xa7, 0x1d, 0xf7,
	0x92, 0x4e, 0x72, 0x48, 0x96, 0xce, 0x8b, 0x7c, 0xcf, 0x2e, 0x43, 0x85, 0x12, 0x78, 0xd0, 0x6c,
	0xc5, 0xe4, 0xd7, 0x8a, 0x18, 0x13, 0xd8, 0x39, 0x98, 0xeb, 0x36, 0x1f, 0xc6, 0xdd, 0x91, 0x51,
	0xa4, 0xfc, 0x4e, 0x77, 0xec, 0x02, 0x94, 0x07, 0xfd, 0xb6, 0xaa, 0x20, 0xb3, 0xa4, 0x54, 0x1a,
	0xf4, 0xdb, 0x98, 0xf1, 0xb5, 0x37, 0x28, 0xc6, 0xec, 0x2a, 0xa4, 0x35, 0x43, 0x0e, 0xfa, 0xc3,
	0x24, 0x35, 0x06, 0x14, 0x29, 0xe8, 0x0f, 0x13, 0xf6, 0x1c, 0x4c, 0x16, 0x0b, 0x25, 0xa5, 0x8c,
	0x5b, 0x9c, 0xa0, 0x93, 0xe8, 0x75, 0x98, 0xdd, 0xed, 0x36, 0x5f, 0x1b, 0xa5, 0x71, 0x5f, 0xc8,
	0x81, 0x53, 0x47, 0xaa, 0x50, 0xcc, 0xda, 0xdb, 0x1a, 0x56, 0x63, 0x34, 0x39, 0xad, 0xad, 0x1a,
	0x19, 0x96, 0xd5, 0xd2, 0xa5, 0xe9, 0x5a, 0x5a, 0x20, 0xe6, 0x54, 0xed, 0x7c, 0x11, 0x2a, 0x9d,
	0xc1, 0x76, 0x3c, 0x1c, 0x75, 0xd2, 0xe6, 0xb0, 0x70, 0x7b, 0x31, 0x2b, 0xea, 0x29, 0x59, 0x8c,
	0x25, 0xd0, 0x73, 0x71, 0xaf, 0x35, 0x3c, 0x1c, 0x24, 0x71, 0x9b, 0x90, 0x56, 0x16, 0x63, 0x42,
	0xcd, 0x86, 0x72, 0xd6, 0x30, 0xfe, 0x73, 0x93, 0x6a, 0x1f, 0x6a, 0x50, 0xce, 0xde, 0xc9, 0x74,
	0x98, 0xa9, 0x3b, 0x1e, 0x9d, 0x51, 0x16, 0xb8, 0x44, 0x4a, 0xb8, 0xe3, 0x91, 0x62, 0x59, 0xe0,
	0x12, 0x29, 0x22, 0x8c, 0xc8, 0xfa, 0xb2, 0xc0, 0x25, 0x52, 0x82, 0x70, 0x23, 0x35, 0x10, 0x97,
	0x48, 0x31, 0xad, 0x4d, 0x8a, 0x5b, 0x59, 0xe0, 0x12, 0x29, 0x0d, 0xb1, 0x4e, 0xed, 0xaa, 0x2c,
	0x70, 0x89, 0x14, 0x6e, 0x71, 0xa3, 0xa4, 0x28, 0xdc, 0xe2, 0x48, 0xb1, 0x1e, 0x08, 0x6a, 0x58,
	0x65, 0x81, 0x4b, 0x84, 0x99, 0x17, 0x52, 0x53, 0x2a, 0x8b, 0x82, 0x17, 0xd6, 0xee, 0x53, 0xfa,
	0xfe, 0x37, 0x23, 0x5f, 0x7b, 0x29, 0x4b, 0x79, 0xc6, 0x26, 0xb2, 0x72, 0x3e, 0xcd, 0x41, 0x06,
	0xc5, 0x56, 0xbf, 0x1d, 0xa7, 0xca, 0xb4, 0xce, 0x35, 0xee, 0x7e, 0x62, 0x8d, 0x5d, 0x58, 0xcc,
	0xfb, 0x49, 0xbd, 0xd3, 0x4d, 0xe2, 0xe1, 0x94, 0xea, 0x6c, 0xaa, 0x7a, 0x1d, 0x16, 0x54, 0x71,
	0x1e, 0xed, 0x3f, 0x54, 0x05, 0x5a, 0xb9, 0xfd, 0x24, 0x51, 0xc3, 0xfd, 0x87, 0x54, 0x9d, 0x2f,
	0x40, 0x39, 0xe7, 0xcf, 0x90, 0x76, 0x69, 0xa4, 0x58, 0xb5, 0x4f, 0xc1, 0xe2, 0x91, 0xee, 0x75,
	0xec, 0x3d, 0x93, 0x27, 0x14, 0xa6, 0x4f, 0x78, 0x67, 0x0e, 0x00, 0xcb, 0x50, 0x6a, 0xe5, 0x25,
	0xa8, 0xa4, 0x8e, 0xee, 0x0c, 0x0c, 0x8d, 0xf2, 0xb3, 0xac, 0x08, 0xce, 0x00, 0xeb, 0x53, 0x1e,
	0x85, 0xb6, 0x51, 0x20, 0x6e, 0x25, 0x0b, 0x42, 0x7b, 0x22, 0x48, 0xbb, 0x8f, 0xdb, 0x3d, 0xa3,
	0x44, 0xfc, 0x54, 0xa3, 0xfe, 0xb8, 0xdd, 0x9b, 0x98, 0x03, 0x28, 0xe5, 0x0d, 0x98, 0x9c, 0x03,
	0x5c, 0x24, 0xb1, 0x67, 0x9e, 0x68, 0xb8, 0x3a, 0x09, 0x1d, 0xe9, 0xb0, 0xcf, 0xc0, 0xc2, 0x64,
	0xb8, 0x3b, 0x03, 0x63, 0x46, 0x89, 0x4d, 0x50, 0x9d, 0x01, 0xbb, 0x01, 0x8b, 0xd3, 0xa8, 0x68,
	0xa7, 0x35, 0x67, 0x61, 0x0a, 0x14, 0xed, 0xa3, 0xf0, 0x21, 0xfb, 0xcb, 0x24, 0x39, 0x79, 0x00,
	0x3d, 0xe2, 0xc8, 0xa4, 0xa2, 0x5e, 0x52, 0x7d, 0x62, 0x52, 0x51, 0xcf, 0xb9, 0x75, 0xfc, 0x24,
	0x70, 0x8a, 0xc4, 0x8f, 0x6b, 0xfd, 0x13, 0x73, 0xe7, 0xec, 0xd2, 0xcc, 0xc7, 0xcc, 0x9d, 0xd3,
	0xf3, 0xcc, 0xdc, 0xd2, 0xcc, 0x78, 0x9e, 0x39, 0x82, 0xbc, 0xc9, 0x79, 0x66, 0x19, 0x74, 0xec,
	0x04, 0x72, 0x94, 0x34, 0x93, 0xfd, 0x91, 0x24, 0xdc, 0x56, 0x94, 0x47, 0x90, 0x1e, 0x12, 0xd9,
	0xea, 0xb7, 0x63, 0xac, 0xef, 0x59, 0x23, 0x33, 0x4e, 0x2a, 0x1c, 0x64, 0xfb, 0xa3, 0xd9, 0x38,
	0x3f, 0x19, 0xe8, 0x8f, 0xcc, 0xc6, 0x85, 0x27, 0xdc, 0x49, 0xa2, 0xf9, 0xb4, 0xb6, 0xb8, 0x34,
	0x33, 0x9e, 0xd6, 0x2e, 0x41, 0xa5, 0xdd, 0x1b, 0xc9, 0xc7, 0xfb, 0xf1, 0xf0, 0xd0, 0x60, 0xea,
	0xfa, 0x76, 0x6f, 0x74, 0x1f, 0xf7, 0x18, 0xd5, 0x0c, 0xa3, 0x59, 0x07, 0x3a, 0xbd, 0x34, 0xb3,
	0x3c, 0x2f, 0x52, 0xe8, 0x38, 0x59, 0x1f, 0x7a, 0x19, 0xce, 0x4c, 0xa1, 0x24, 0x93, 0x3e, 0x43,
	0xd2, 0x93, 0x91, 0xc9, 0x54, 0x6a, 0x7f, 0xd3, 0xa0, 0x14, 0x34, 0x0f, 0xbb, 0xfd, 0x66, 0x9b,
	0x5d, 0x9b, 0x6a, 0xda, 0x8b, 0x47, 0x9c, 0x9b, 0xa6, 0x16, 0x96, 0xb0, 0xa0, 0x91, 0x66, 0x15,
	0x2e, 0x31, 0x01, 0xbb, 0xfd, 0x51, 0x42, 0xa9, 0x5a, 0x14, 0xb4, 0x46, 0x5a, 0xbb, 0x99, 0x34,
	0xa9, 0x62, 0x9e, 0x14, 0xb4, 0xce, 0x3f, 0x49, 0x66, 0x3f, 0xe1, 0x27, 0xc9, 0x25, 0xa8, 0x3c,
	0xea, 0x8f, 0x12, 0xd5, 0x20, 0xe7, 0xd4, 0x88, 0x8d, 0x04, 0xea, 0x90, 0xff, 0xd0, 0x60, 0xc6,
	0xf6, 0x42, 0x74, 0xa7, 0x72, 0x9a, 0xea, 0x0a, 0x6a, 0x83, 0x46, 0x76, 0x06, 0xa3, 0x34, 0x63,
	0x71, 0x89, 0x94, 0x24, 0xe9, 0xaa, 0xcf, 0x15, 0x81, 0x4b, 0x6c, 0x28, 0x2d, 0x35, 0x76, 0xa7,
	0x6d, 0x59, 0xed, 0xd8, 0x8b, 0xc0, 0x26, 0xa7, 0xc2, 0xb4, 0xe9, 0xa8, 0x06, 0x7d, 0x6a, 0x82,
	0x13, 0xaa, 0xfe, 0x83, 0xf1, 0x24, 0x58, 0xcd, 0xd1, 0xd1, 0x6a, 0x83, 0x87, 0x3f, 0x46, 0x77,
	0x8d, 0xd2, 0xaa, 0x90, 0xee, 0x98, 0x01, 0xa5, 0xe1, 0x50, 0x31, 0x54, 0xba, 0x65, 0xdb, 0xda,
	0x2a, 0x00, 0xcd, 0x2e, 0x71, 0xb3, 0x1d, 0x0f, 0xd1, 0xdc, 0xd7, 0xe3, 0xec, 0x51, 0xb8, 0xc4,
	0x7b, 0x0e, 0x9a, 0xdd, 0xfd, 0x38, 0xed, 0x70, 0x6a, 0x53, 0x7b, 0x47, 0x83, 0x22, 0xaa, 0xe5,
	0x45, 0x59, 0x1b, 0x17, 0x65, 0x34, 0x62, 0x2f, 0x4e, 0x1e, 0x51, 0xe9, 0xa2, 0x96, 0xa9, 0x76,
	0x78, 0xf8, 0xfe, 0xb0, 0x9b, 0x0e, 0x2a, 0xb8, 0x9c, 0x02, 0x7f, 0x51, 0x79, 0x3a, 0x07, 0xff,
	0x0a, 0x94, 0x1e, 0x91, 0x51, 0x23, 0xca, 0xd0, 0x6a, 0x36, 0xcd, 0x8d, 0xad, 0x15, 0x99, 0x40,
	0xed, 0x3d, 0x0d, 0x66, 0x69, 0xbc, 0xc2, 0xd2, 0x19, 0x0f, 0x87, 0xfd, 0xa1, 0xcc, 0xad, 0x9a,
	0x15, 0x15, 0xa2, 0x50, 0xb6, 0x5d, 0x85, 0x6a, 0x73, 0xd0, 0x91, 0x07, 0xe9, 0xa0, 0xa0, 0xd0,
	0x04, 0xcd, 0x41, 0x27, 0x1b, 0x0c, 0xce, 0x43, 0x09, 0x05, 0xd0, 0x09, 0xca, 0xce, 0xb9, 0xe6,
	0xa0, 0xb3, 0x19, 0x1f, 0x62, 0x25, 0x6c, 0xf5, 0x87, 0xc3, 0xb8, 0x9b, 0x61, 0x9c, 0x0c, 0x9e,
	0x15, 0xf3, 0x13, 0x54, 0xa7, 0x8d, 0xee, 0x4a, 0xfa, 0x83, 0x4e, 0x2b, 0x0d, 0x9c, 0xda, 0xd4,
	0xfe, 0x0f, 0x4a, 0x59, 0xe1, 0x61, 0x50, 0x24, 0x60, 0x29, 0x17, 0xd3, 0x7a, 0x7a, 0x8e, 0x2b,
	0x1c, 0x99, 0xe3, 0x56, 0x6e, 0x41, 0x39, 0x9b, 0x5f, 0x99, 0x0e, 0x27, 0x1b, 0xde, 0xa6, 0xe7,
	0x3f, 0xf0, 0x64, 0xb4, 0x13, 0x70, 0xfd, 0x04, 0xab, 0xc0, 0xac, 0x7b, 0x47, 0xba, 0xab, 0xba,
	0xc6, 0xe6, 0xa0, 0xe0, 0xde, 0xd3, 0x0b, 0x2b, 0xff, 0xd2, 0xe0, 0xec, 0xb1, 0x5f, 0x10, 0xec,
	0x14, 0xcc, 0x67, 0xea, 0x81, 0xef, 0x78, 0x91, 0x7e, 0x82, 0x9d, 0x84, 0x72, 0xe4, 0xcb, 0x40,
	0xf8, 0xaf, 0xee, 0xe8, 0x1a, 0xab, 0x42, 0x29, 0xf2, 0xe5, 0x86, 0x1f, 0x46, 0x7a, 0x21, 0x65,
	0x85, 0x91, 0x69, 0x6d, 0xea, 0x33, 0x6c, 0x01, 0x20, 0xf2, 0xa5, 0xbf, 0xcd, 0x85, 0x6b, 0xee,
	0xe8, 0x45, 0xb6, 0x08, 0xd5, 0xc8, 0x97, 0xdc, 0xb3, 0xd5, 0x49, 0x31, 0x1e, 0x5e, 0x17, 0xfe,
	0xd6, 0x98, 0x34, 0x8b, 0x3a, 0x44, 0x52, 0xc7, 0xcf, 0xb1, 0x79, 0xa8, 0xd0, 0x9e, 0x2e, 0x28,
	0xe5, 0x6c, 0x75, 0x45, 0x19, 0x5f, 0x47, 0xfb, 0xec, 0x92, 0x4a, 0x4e, 0xf1, 0x78, 0xf4, 0xc0,
	0x17, 0x9b, 0x3a, 0xa4, 0x66, 0x64, 0xfb, 0xea, 0xca, 0x06, 0xc0, 0x78, 0xbe, 0x67, 0xa7, 0x61,
	0x31, 0x7b, 0xa0, 0x7b, 0x2f, 0x73, 0x51, 0x15, 0x4a, 0x82, 0xdf, 0x6f, 0xf0, 0x30, 0xd2, 0x35,
	0x7c, 0x94, 0xe0, 0x61, 0xe0, 0x7b, 0x21, 0xd7, 0x0b, 0x0c, 0x60, 0x2e, 0x34, 0xb7, 0x02, 0x97,
	0xeb, 0x33, 0x2b, 0x2f, 0x41, 0x25, 0x9f, 0x15, 0xf1, 0x75, 0x4e, 0x20, 0x3d, 0x3f, 0x92, 0x8d,
	0x90, 0xdb, 0xfa, 0x09, 0x56, 0x86, 0xa2, 0x13, 0x1c, 0xa0, 0x9b, 0xd5, 0xea, 0xae, 0x5e, 0x58,
	0xe1, 0x50, 0x4a, 0xfb, 0x05, 0x5e, 0xbc, 0xcd, 0x85, 0xed, 0x58, 0x91, 0x4c, 0x0d, 0xd0, 0x4f,
	0xd0, 0x73, 0x7d, 0xf1, 0xc0, 0x14, 0x36, 0xb7, 0x95, 0x73, 0x6d, 0xe1, 0x07, 0x01, 0xb7, 0xf5,
	0x02, 0xc6, 0x8d, 0x0b, 0xe1, 0x0b, 0x7d, 0x66, 0xe5, 0xad, 0x79, 0x80, 0xf1, 0x37, 0x1a, 0x3b,
	0x0f, 0xa7, 0x51, 0x4c, 0x0a, 0x6e, 0x86, 0xbe, 0x37, 0x71, 0xdc, 0x79, 0x60, 0x8e, 0xb7, 0x6d,
	0xba, 0x8e, 0x2d, 0x43, 0xbf, 0x21, 0x2c, 0x2e, 0xb7, 0x4c, 0x4b, 0xff, 0xac, 0xc6, 0x2e, 0xc3,
	0xf9, 0x8c, 0x61, 0xf3, 0x30, 0x72, 0x3c, 0x33, 0x72, 0x7c, 0x8f, 0xb8, 0x9f, 0xd3, 0xd8, 0x39,
	0x38, 0x75, 0x44, 0xcd, 0x09, 0xf4, 0xcf, 0x6b, 0x8c, 0xc1, 0x7c, 0xe0, 0xbb, 0x8e, 0xb5, 0x23,
	0x6d, 0xee, 0x39, 0xdc, 0xd6, 0xbf, 0xa0, 0xb1, 0x4b, 0x70, 0x2e, 0x93, 0x0d, 0x4c, 0x6b, 0x93,
	0x47, 0x32, 0xb3, 0xf8, 0x8b, 0x1a, 0xbb, 0x06, 0x4f, 0x59, 0x91, 0x8c, 0x44, 0xc3, 0xb3, 0xcc,
	0x88, 0xdb, 0xd2, 0x17, 0x32, 0x13, 0xde, 0xe0, 0xa6, 0xcd, 0x85, 0xfe, 0x26, 0xd9, 0x62, 0x45,
	0x72, 0xcb, 0x09, 0x43, 0xc7, 0x5b, 0x97, 0x91, 0x15, 0x48, 0xd3, 0xda, 0x94, 0x75, 0xd7, 0x5c,
	0xd7, 0xdf, 0xa2, 0xf3, 0xc7, 0x1e, 0x92, 0xee, 0x2a, 0x22, 0x23, 0xf2, 0x2d, 0xdf, 0xd5, 0xbf,
	0xa4, 0xb1, 0x1b, 0x50, 0xb3, 0x22, 0x69, 0x99, 0x1e, 0xba, 0xdd, 0x12, 0xdc, 0x8c, 0xb8, 0xe4,
	0x5e, 0x24, 0x76, 0xa4, 0x02, 0x11, 0x19, 0xa4, 0x7f, 0x99, 0xee, 0x68, 0x78, 0x61, 0x23, 0x08,
	0x7c, 0x81, 0x76, 0xb8, 0x77, 0xc6, 0xc7, 0xbc, 0xad, 0xb1, 0xb3, 0xa0, 0xe3, 0xf5, 0xdc, 0x96,
	0x91, 0xe9, 0xb8, 0xd2, 0x32, 0x5d, 0x57, 0x7f, 0x87, 0x94, 0xc8, 0xe1, 0xf2, 0x81, 0x70, 0x22,
	0xb2, 0xcd, 0xcf, 0x8e, 0x7c, 0x57, 0x63, 0x06, 0x9c, 0x3e, 0xce, 0xaa, 0xaf, 0x4c, 0x71, 0x70,
	0x38, 0xdd, 0x5e, 0x95, 0x96, 0x6f, 0x73, 0xfd, 0xab, 0xc7, 0x71, 0x08, 0x70, 0x5f, 0x7b, 0x92,
	0x73, 0x57, 0xe9, 0x7c, 0xfd, 0x38, 0x0e, 0xe9, 0x7c, 0x43, 0x63, 0x4b, 0x70, 0x49, 0xd9, 0x27,
	0x78, 0x24, 0x1c, 0xbe, 0x4d, 0x26, 0x36, 0x3c, 0x8f, 0xbb, 0x72, 0x93, 0xef, 0xe8, 0xdf, 0xd4,
	0xd8, 0x75, 0xb8, 0xfa, 0x51, 0x12, 0x7e, 0x80, 0x11, 0x0f, 0xf5, 0x6f, 0x69, 0xec, 0x22, 0x9c,
	0xcd, 0xa2, 0xb2, 0xce, 0x3d, 0xbe, 0xcd, 0x53, 0xa6, 0xfe, 0x6d, 0x8d, 0x3d, 0x05, 0x17, 0xf2,
	0x57, 0xde, 0x91, 0x91, 0x29, 0xd6, 0x79, 0x24, 0x4d, 0xdb, 0x16, 0x3c, 0x0c, 0xf5, 0xef, 0x50,
	0x78, 0xc2, 0xc8, 0x74, 0x39, 0x86, 0xb6, 0xe1, 0x09, 0xbf, 0x11, 0x99, 0x6b, 0x2e, 0xe1, 0xe5,
	0xbb, 0x1a, 0x7b, 0x16, 0x9e, 0xf6, 0x7c, 0xb9, 0x65, 0x46, 0xd6, 0x06, 0xde, 0xec, 0xfa, 0x96,
	0xe9, 0x4a, 0xcb, 0xf7, 0x22, 0xd3, 0xf1, 0xb8, 0x90, 0x75, 0xbf, 0xe1, 0xd9, 0xfa, 0xf7, 0x28,
	0x8c, 0xa9, 0xa3, 0x37, 0x1c, 0x97, 0x4b, 0xcb, 0x17, 0x82, 0x5b, 0xe4, 0x71, 0xf7, 0x8e, 0xb4,
	0x36, 0xb8, 0xb5, 0x19, 0x36, 0xb6, 0xf4, 0xef, 0x7f, 0xac, 0xe0, 0xea, 0x58, 0xf0, 0x07, 0x39,
	0xa6, 0xcc, 0x40, 0x3a, 0x5e, 0xc8, 0x05, 0x81, 0xbb, 0x6e, 0x3a, 0x2e, 0xb7, 0xf5, 0x1f, 0x6a,
	0xac, 0x06, 0x57, 0xb2, 0x07, 0x3b, 0xe8, 0x50, 0xfe, 0x6a, 0xc4, 0xbd, 0x10, 0x65, 0x52, 0x54,
	0xfe, 0x88, 0xa0, 0xeb, 0x04, 0xb2, 0x2e, 0xcc, 0xf5, 0x2d, 0xee, 0x45, 0x2a, 0x3d, 0x10, 0x65,
	0x39, 0x88, 0xf4, 0xf7, 0xc8, 0x3b, 0x21, 0x17, 0xdb, 0x8e, 0xc5, 0xe5, 0x1a, 0x02, 0xc3, 0xb3,
	0x49, 0x46, 0x3d, 0xec, 0xc7, 0x1a, 0x5b, 0x86, 0x6b, 0x9e, 0x9f, 0x7b, 0x5c, 0x48, 0xee, 0x59,
	0x66, 0x10, 0x36, 0x5c, 0x75, 0x5c, 0x5e, 0xf6, 0xde, 0xa7, 0xeb, 0x94, 0x7d, 0x08, 0x32, 0x65,
	0xb3, 0x74, 0xbc, 0xac, 0xce, 0x6e, 0x99, 0x81, 0xfe, 0x13, 0x8d, 0x3d, 0x0f, 0xcf, 0x0a, 0x6e,
	0x5a, 0x1b, 0xdc, 0x96, 0xdc, 0x8e, 0xa4, 0x40, 0xb8, 0xbb, 0xce, 0x96, 0x02, 0x27, 0x55, 0x80,
	0x0d, 0x5f, 0x38, 0x9f, 0xf1, 0x3d, 0xfd, 0x03, 0x72, 0x7e, 0x16, 0x39, 0xcb, 0xf7, 0x3c, 0xf4,
	0x93, 0xef, 0xc9, 0x48, 0x98, 0xd6, 0x26, 0x8a, 0x87, 0x91, 0x19, 0x71, 0xfd, 0xa7, 0xf4, 0x06,
	0x15, 0x18, 0x2c, 0xb1, 0xd2, 0x09, 0x31, 0x8c, 0x78, 0x09, 0xc6, 0x51, 0xff, 0x99, 0xc6, 0x5e,
	0x81, 0xff, 0xf1, 0x7c, 0x3c, 0xa2, 0xee, 0xac, 0x37, 0x84, 0xb2, 0xdc, 0xdc, 0x36, 0x1d, 0x97,
	0x02, 0x8d, 0x16, 0x72, 0x51, 0xf7, 0xc5, 0x96, 0xcc, 0x4b, 0x83, 0xe5, 0xa0, 0x2f, 0xf5, 0x9f,
	0x3f, 0x99, 0x76, 0xb7, 0xc7, 0x79, 0xf2, 0x0b, 0x0a, 0x03, 0xc1, 0x23, 0x08, 0xd0, 0xa0, 0xba,
	0x2f, 0xa4, 0x67, 0x62, 0xd0, 0xc2, 0xfb, 0x0d, 0x2e, 0x4c, 0x9b, 0xeb, 0xbf, 0xd4, 0xd8, 0x0b,
	0x70, 0x63, 0xf2, 0x84, 0x4c, 0xfd, 0x38, 0xe9, 0x5f, 0x51, 0xe1, 0xaa, 0x3b, 0x6b, 0xd2, 0xf5,
	0xfd, 0xcd, 0x46, 0x90, 0x05, 0xfc, 0xd7, 0x14, 0x87, 0x69, 0xd7, 0x47, 0xc2, 0xac, 0xd7, 0x1d,
	0x0b, 0x9f, 0x1b, 0x08, 0x7f, 0xc3, 0x59, 0x73, 0x30, 0xa2, 0x1f, 0x52, 0x29, 0xc8, 0xa1, 0x61,
	0x73, 0x2f, 0x72, 0xa2, 0x1d, 0xfd, 0x37, 0x1a, 0x3b, 0x0d, 0x0b, 0x99, 0x33, 0x43, 0xee, 0x21,
	0x44, 0x7e, 0x4b, 0x44, 0x34, 0x01, 0x23, 0xee, 0x71, 0x8e, 0x15, 0xfb, 0x77, 0x44, 0x74, 0x42,
	0x69, 0x4a, 0xcb, 0x6d, 0x84, 0x11, 0x17, 0x4e, 0xa0, 0xff, 0x5e, 0x63, 0x37, 0xe1, 0xb9, 0xba,
	0x23, 0xc2, 0x48, 0xba, 0xfe, 0xba, 0x83, 0xbe, 0xb6, 0xcd, 0xc8, 0x5c, 0x17, 0xe6, 0x56, 0x0e,
	0xb0, 0x09, 0xdc, 0xfc, 0x41, 0x63, 0x57, 0xc0, 0xa8, 0xfb, 0x62, 0xcd, 0xb1, 0x6d, 0x9e, 0x67,
	0xfd, 0x16, 0x0f, 0x43, 0x73, 0x9d, 0xeb, 0x7f, 0xd4, 0xd8, 0xd3, 0x70, 0x59, 0x15, 0x60, 0xb9,
	0xb6, 0x23, 0xdd, 0x35, 0x19, 0x0a, 0x4b, 0x0a, 0xd3, 0x5b, 0xe7, 0x2a, 0x07, 0xf4, 0x3f, 0x69,
	0xec, 0x02, 0x9c, 0x09, 0x7d, 0x2a, 0xc7, 0xd3, 0xce, 0xf8, 0xf3, 0x24, 0xcb, 0x0c, 0x43, 0x67,
	0x3d, 0x4f, 0x8c, 0xbf, 0x68, 0xec, 0x65, 0x78, 0x81, 0xf0, 0x26, 0x05, 0xb7, 0x1d, 0x91, 0x42,
	0x66, 0x0a, 0xf5, 0xe4, 0xf8, 0x3c, 0x88, 0x7f, 0xd5, 0x56, 0x3e, 0x0d, 0xfa, 0xd1, 0xbf, 0x3c,
	0xd9, 0x15, 0xb8, 0x90, 0x39, 0x78, 0x7c, 0xcc, 0xb8, 0x2b, 0x55, 0xa1, 0xe4, 0x78, 0xeb, 0x54,
	0x41, 0x34, 0xec, 0xa7, 0x5c, 0xad, 0x0b, 0x2b, 0xff, 0x0b, 0x95, 0xf1, 0xd7, 0x72, 0x15, 0x4a,
	0x63, 0x95, 0x45, 0xa8, 0x12, 0x27, 0x6c, 0xee, 0x0d, 0xba, 0xb1, 0x5e, 0xc1, 0xa6, 0x2e, 0xe8,
	0xbf, 0x30, 0xb7, 0x3f, 0x4a, 0xf4, 0xc2, 0xc3, 0x39, 0x9a, 0x02, 0xef, 0xfc, 0x3b, 0x00, 0x00,
	0xff, 0xff, 0x79, 0x10, 0x70, 0xc5, 0x8f, 0x18, 0x00, 0x00,
}
